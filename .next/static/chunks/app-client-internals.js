/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app-client-internals"],{

/***/ "./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=next%2Fdist%2Fclient%2Fcomponents%2Fapp-router&modules=next%2Fdist%2Fclient%2Fcomponents%2Flayout-router&modules=next%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context&server=false!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=next%2Fdist%2Fclient%2Fcomponents%2Fapp-router&modules=next%2Fdist%2Fclient%2Fcomponents%2Flayout-router&modules=next%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context&server=false! ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/app-router */ \"./node_modules/next/dist/client/components/app-router.js\", 23));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/layout-router */ \"./node_modules/next/dist/client/components/layout-router.js\", 23));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/render-from-template-context */ \"./node_modules/next/dist/client/components/render-from-template-context.js\", 23))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWZsaWdodC1jbGllbnQtZW50cnktbG9hZGVyLmpzP21vZHVsZXM9bmV4dCUyRmRpc3QlMkZjbGllbnQlMkZjb21wb25lbnRzJTJGYXBwLXJvdXRlciZtb2R1bGVzPW5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRmxheW91dC1yb3V0ZXImbW9kdWxlcz1uZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZyZW5kZXItZnJvbS10ZW1wbGF0ZS1jb250ZXh0JnNlcnZlcj1mYWxzZSEuanMiLCJtYXBwaW5ncyI6IkFBQUEsME1BQTJFO0FBQzNFLGdOQUE4RTtBQUM5RSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzZlNGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJuZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvYXBwLXJvdXRlclwiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwibmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2xheW91dC1yb3V0ZXJcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIm5leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9yZW5kZXItZnJvbS10ZW1wbGF0ZS1jb250ZXh0XCIpIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=next%2Fdist%2Fclient%2Fcomponents%2Fapp-router&modules=next%2Fdist%2Fclient%2Fcomponents%2Flayout-router&modules=next%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context&server=false!\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/app-router-headers.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/app-router-headers.js ***!
  \************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RSC_VARY_HEADER = exports.NEXT_ROUTER_PREFETCH = exports.NEXT_ROUTER_STATE_TREE = exports.RSC = void 0;\nconst RSC = \"RSC\";\nexports.RSC = RSC;\nconst NEXT_ROUTER_STATE_TREE = \"Next-Router-State-Tree\";\nexports.NEXT_ROUTER_STATE_TREE = NEXT_ROUTER_STATE_TREE;\nconst NEXT_ROUTER_PREFETCH = \"Next-Router-Prefetch\";\nexports.NEXT_ROUTER_PREFETCH = NEXT_ROUTER_PREFETCH;\nconst RSC_VARY_HEADER = \"\".concat(RSC, \", \").concat(NEXT_ROUTER_STATE_TREE, \", \").concat(NEXT_ROUTER_PREFETCH);\nexports.RSC_VARY_HEADER = RSC_VARY_HEADER;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=app-router-headers.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FwcC1yb3V0ZXItaGVhZGVycy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU8sSUFBSTtBQUNmLENBQUMsRUFBQztBQUNGRCx1QkFBdUIsR0FBR0EsNEJBQTRCLEdBQUdBLDhCQUE4QixHQUFHQSxXQUFXLEdBQUcsS0FBSztBQUM3RyxNQUFNSyxNQUFNO0FBQ1pMLFdBQVcsR0FBR0s7QUFDZCxNQUFNRCx5QkFBeUI7QUFDL0JKLDhCQUE4QixHQUFHSTtBQUNqQyxNQUFNRCx1QkFBdUI7QUFDN0JILDRCQUE0QixHQUFHRztBQUMvQixNQUFNRCxrQkFBa0IsR0FBV0UsT0FBUkMsS0FBSSxNQUErQkYsT0FBM0JDLHdCQUF1QixNQUF5QixPQUFyQkQ7QUFDOURILHVCQUF1QixHQUFHRTtBQUUxQixJQUFJLENBQUMsT0FBT0YsUUFBUU0sT0FBTyxLQUFLLGNBQWUsT0FBT04sUUFBUU0sT0FBTyxLQUFLLFlBQVlOLFFBQVFNLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT04sUUFBUU0sT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNyS1QsT0FBT0MsY0FBYyxDQUFDQyxRQUFRTSxPQUFPLEVBQUUsY0FBYztRQUFFTCxPQUFPLElBQUk7SUFBQztJQUNuRUgsT0FBT1UsTUFBTSxDQUFDUixRQUFRTSxPQUFPLEVBQUVOO0lBQy9CUyxPQUFPVCxPQUFPLEdBQUdBLFFBQVFNLE9BQU87QUFDbEMsQ0FBQyxDQUVELDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FwcC1yb3V0ZXItaGVhZGVycy5qcz8zNTZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5SU0NfVkFSWV9IRUFERVIgPSBleHBvcnRzLk5FWFRfUk9VVEVSX1BSRUZFVENIID0gZXhwb3J0cy5ORVhUX1JPVVRFUl9TVEFURV9UUkVFID0gZXhwb3J0cy5SU0MgPSB2b2lkIDA7XG5jb25zdCBSU0MgPSAnUlNDJztcbmV4cG9ydHMuUlNDID0gUlNDO1xuY29uc3QgTkVYVF9ST1VURVJfU1RBVEVfVFJFRSA9ICdOZXh0LVJvdXRlci1TdGF0ZS1UcmVlJztcbmV4cG9ydHMuTkVYVF9ST1VURVJfU1RBVEVfVFJFRSA9IE5FWFRfUk9VVEVSX1NUQVRFX1RSRUU7XG5jb25zdCBORVhUX1JPVVRFUl9QUkVGRVRDSCA9ICdOZXh0LVJvdXRlci1QcmVmZXRjaCc7XG5leHBvcnRzLk5FWFRfUk9VVEVSX1BSRUZFVENIID0gTkVYVF9ST1VURVJfUFJFRkVUQ0g7XG5jb25zdCBSU0NfVkFSWV9IRUFERVIgPSBgJHtSU0N9LCAke05FWFRfUk9VVEVSX1NUQVRFX1RSRUV9LCAke05FWFRfUk9VVEVSX1BSRUZFVENIfWA7XG5leHBvcnRzLlJTQ19WQVJZX0hFQURFUiA9IFJTQ19WQVJZX0hFQURFUjtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlci1oZWFkZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJTQ19WQVJZX0hFQURFUiIsIk5FWFRfUk9VVEVSX1BSRUZFVENIIiwiTkVYVF9ST1VURVJfU1RBVEVfVFJFRSIsIlJTQyIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/app-router-headers.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/app-router.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/components/app-router.js ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _s = $RefreshSig$();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = AppRouter;\nexports.fetchServerResponse = fetchServerResponse;\nvar _async_to_generator = (__webpack_require__(/*! @swc/helpers/lib/_async_to_generator.js */ \"./node_modules/@swc/helpers/lib/_async_to_generator.js\")[\"default\"]);\nvar _interop_require_wildcard = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_wildcard.js */ \"./node_modules/@swc/helpers/lib/_interop_require_wildcard.js\")[\"default\"]);\nvar _react = _interop_require_wildcard(__webpack_require__(/*! react */ \"./node_modules/next/dist/compiled/react/index.js\"));\nvar _client = __webpack_require__(/*! next/dist/compiled/react-server-dom-webpack/client */ \"./node_modules/next/dist/compiled/react-server-dom-webpack/client.js\");\nvar _appRouterContext = __webpack_require__(/*! ../../shared/lib/app-router-context */ \"./node_modules/next/dist/shared/lib/app-router-context.js\");\nvar _reducer = __webpack_require__(/*! ./reducer */ \"./node_modules/next/dist/client/components/reducer.js\");\nvar _hooksClientContext = __webpack_require__(/*! ../../shared/lib/hooks-client-context */ \"./node_modules/next/dist/shared/lib/hooks-client-context.js\");\nvar _useReducerWithDevtools = __webpack_require__(/*! ./use-reducer-with-devtools */ \"./node_modules/next/dist/client/components/use-reducer-with-devtools.js\");\nvar _errorBoundary = __webpack_require__(/*! ./error-boundary */ \"./node_modules/next/dist/client/components/error-boundary.js\");\nvar _appRouterHeaders = __webpack_require__(/*! ./app-router-headers */ \"./node_modules/next/dist/client/components/app-router-headers.js\");\nfunction AppRouter(props) {\n    return /*#__PURE__*/ _react.default.createElement(_errorBoundary.ErrorBoundary, {\n        errorComponent: _errorBoundary.GlobalErrorComponent\n    }, /*#__PURE__*/ _react.default.createElement(Router, Object.assign({}, props)));\n}\n_c = AppRouter;\n\"use client\";\nfunction urlToUrlWithoutFlightMarker(url) {\n    const urlWithoutFlightParameters = new URL(url, location.origin);\n    // TODO-APP: handle .rsc for static export case\n    return urlWithoutFlightParameters;\n}\nconst HotReloader =  false ? 0 : (__webpack_require__(/*! ./react-dev-overlay/hot-reloader-client */ \"./node_modules/next/dist/client/components/react-dev-overlay/hot-reloader-client.js\")[\"default\"]);\nfunction fetchServerResponse(url, flightRouterState, prefetch) {\n    return _fetchServerResponse.apply(this, arguments);\n}\nfunction _fetchServerResponse() {\n    _fetchServerResponse = _async_to_generator(function*(url, flightRouterState, prefetch) {\n        const headers = {\n            // Enable flight response\n            [_appRouterHeaders.RSC]: \"1\",\n            // Provide the current router state\n            [_appRouterHeaders.NEXT_ROUTER_STATE_TREE]: JSON.stringify(flightRouterState)\n        };\n        if (prefetch) {\n            // Enable prefetch response\n            headers[_appRouterHeaders.NEXT_ROUTER_PREFETCH] = \"1\";\n        }\n        const res = yield fetch(url.toString(), {\n            headers\n        });\n        const canonicalUrl = res.redirected ? urlToUrlWithoutFlightMarker(res.url) : undefined;\n        const isFlightResponse = res.headers.get(\"content-type\") === \"application/octet-stream\";\n        // If fetch returns something different than flight response handle it like a mpa navigation\n        if (!isFlightResponse) {\n            return [\n                res.url,\n                undefined\n            ];\n        }\n        // Handle the `fetch` readable stream that can be unwrapped by `React.use`.\n        const flightData = yield (0, _client).createFromFetch(Promise.resolve(res));\n        return [\n            flightData,\n            canonicalUrl\n        ];\n    });\n    return _fetchServerResponse.apply(this, arguments);\n}\n// Ensure the initialParallelRoutes are not combined because of double-rendering in the browser with Strict Mode.\n// TODO-APP: move this back into AppRouter\nlet initialParallelRoutes =  false ? 0 : new Map();\nconst prefetched = new Set();\n/**\n * The global router that wraps the application components.\n */ function Router(param) {\n    let { initialHead , initialTree , initialCanonicalUrl , children , assetPrefix  } = param;\n    _s();\n    const initialState = (0, _react).useMemo(()=>{\n        return {\n            tree: initialTree,\n            cache: {\n                status: _appRouterContext.CacheStates.READY,\n                data: null,\n                subTreeData: children,\n                parallelRoutes:  false ? 0 : initialParallelRoutes\n            },\n            prefetchCache: new Map(),\n            pushRef: {\n                pendingPush: false,\n                mpaNavigation: false\n            },\n            focusAndScrollRef: {\n                apply: false\n            },\n            canonicalUrl: // This is safe to do as canonicalUrl can't be rendered, it's only used to control the history updates in the useEffect further down in this file.\n             true ? (0, _reducer).createHrefFromUrl(new URL(window.location.href)) : 0\n        };\n    }, [\n        children,\n        initialCanonicalUrl,\n        initialTree\n    ]);\n    const [{ tree , cache , prefetchCache , pushRef , focusAndScrollRef , canonicalUrl  }, dispatch, sync] = (0, _useReducerWithDevtools).useReducerWithReduxDevtools(_reducer.reducer, initialState);\n    (0, _react).useEffect(()=>{\n        // Ensure initialParallelRoutes is cleaned up from memory once it's used.\n        initialParallelRoutes = null;\n    }, []);\n    // Add memoized pathname/query for useSearchParams and usePathname.\n    const { searchParams , pathname  } = (0, _react).useMemo(()=>{\n        const url = new URL(canonicalUrl,  false ? 0 : window.location.href);\n        return {\n            // This is turned into a readonly class in `useSearchParams`\n            searchParams: url.searchParams,\n            pathname: url.pathname\n        };\n    }, [\n        canonicalUrl\n    ]);\n    /**\n   * Server response that only patches the cache and tree.\n   */ const changeByServerResponse = (0, _react).useCallback((previousTree, flightData, overrideCanonicalUrl)=>{\n        dispatch({\n            type: _reducer.ACTION_SERVER_PATCH,\n            flightData,\n            previousTree,\n            overrideCanonicalUrl,\n            cache: {\n                status: _appRouterContext.CacheStates.LAZYINITIALIZED,\n                data: null,\n                subTreeData: null,\n                parallelRoutes: new Map()\n            },\n            mutable: {}\n        });\n    }, [\n        dispatch\n    ]);\n    /**\n   * The app router that is exposed through `useRouter`. It's only concerned with dispatching actions to the reducer, does not hold state.\n   */ const appRouter = (0, _react).useMemo(()=>{\n        const navigate = (href, navigateType, forceOptimisticNavigation)=>{\n            return dispatch({\n                type: _reducer.ACTION_NAVIGATE,\n                url: new URL(href, location.origin),\n                forceOptimisticNavigation,\n                navigateType,\n                cache: {\n                    status: _appRouterContext.CacheStates.LAZYINITIALIZED,\n                    data: null,\n                    subTreeData: null,\n                    parallelRoutes: new Map()\n                },\n                mutable: {}\n            });\n        };\n        const routerInstance = {\n            back: ()=>window.history.back(),\n            forward: ()=>window.history.forward(),\n            // TODO-APP: implement prefetching of flight\n            prefetch: _async_to_generator(function*(href) {\n                // If prefetch has already been triggered, don't trigger it again.\n                if (prefetched.has(href)) {\n                    return;\n                }\n                prefetched.add(href);\n                const url = new URL(href, location.origin);\n                try {\n                    var ref;\n                    const routerTree = ((ref = window.history.state) == null ? void 0 : ref.tree) || initialTree;\n                    // TODO-APP: handle case where history.state is not the new router history entry\n                    const serverResponse = yield fetchServerResponse(url, routerTree, true);\n                    // @ts-ignore startTransition exists\n                    _react.default.startTransition(()=>{\n                        dispatch({\n                            type: _reducer.ACTION_PREFETCH,\n                            url,\n                            tree: routerTree,\n                            serverResponse\n                        });\n                    });\n                } catch (err) {\n                    console.error(\"PREFETCH ERROR\", err);\n                }\n            }),\n            replace: function(href) {\n                let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n                // @ts-ignore startTransition exists\n                _react.default.startTransition(()=>{\n                    navigate(href, \"replace\", Boolean(options.forceOptimisticNavigation));\n                });\n            },\n            push: function(href) {\n                let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n                // @ts-ignore startTransition exists\n                _react.default.startTransition(()=>{\n                    navigate(href, \"push\", Boolean(options.forceOptimisticNavigation));\n                });\n            },\n            refresh: ()=>{\n                // @ts-ignore startTransition exists\n                _react.default.startTransition(()=>{\n                    dispatch({\n                        type: _reducer.ACTION_REFRESH,\n                        // TODO-APP: revisit if this needs to be passed.\n                        cache: {\n                            status: _appRouterContext.CacheStates.LAZYINITIALIZED,\n                            data: null,\n                            subTreeData: null,\n                            parallelRoutes: new Map()\n                        },\n                        mutable: {}\n                    });\n                });\n            }\n        };\n        return routerInstance;\n    }, [\n        dispatch,\n        initialTree\n    ]);\n    (0, _react).useEffect(()=>{\n        // When mpaNavigation flag is set do a hard navigation to the new url.\n        if (pushRef.mpaNavigation) {\n            window.location.href = canonicalUrl;\n            return;\n        }\n        // Identifier is shortened intentionally.\n        // __NA is used to identify if the history entry can be handled by the app-router.\n        // __N is used to identify if the history entry can be handled by the old router.\n        const historyState = {\n            __NA: true,\n            tree\n        };\n        if (pushRef.pendingPush && (0, _reducer).createHrefFromUrl(new URL(window.location.href)) !== canonicalUrl) {\n            // This intentionally mutates React state, pushRef is overwritten to ensure additional push/replace calls do not trigger an additional history entry.\n            pushRef.pendingPush = false;\n            window.history.pushState(historyState, \"\", canonicalUrl);\n        } else {\n            window.history.replaceState(historyState, \"\", canonicalUrl);\n        }\n        sync();\n    }, [\n        tree,\n        pushRef,\n        canonicalUrl,\n        sync\n    ]);\n    // Add `window.nd` for debugging purposes.\n    // This is not meant for use in applications as concurrent rendering will affect the cache/tree/router.\n    if (true) {\n        // @ts-ignore this is for debugging\n        window.nd = {\n            router: appRouter,\n            cache,\n            prefetchCache,\n            tree\n        };\n    }\n    /**\n   * Handle popstate event, this is used to handle back/forward in the browser.\n   * By default dispatches ACTION_RESTORE, however if the history entry was not pushed/replaced by app-router it will reload the page.\n   * That case can happen when the old router injected the history entry.\n   */ const onPopState = (0, _react).useCallback((param)=>{\n        let { state  } = param;\n        if (!state) {\n            // TODO-APP: this case only happens when pushState/replaceState was called outside of Next.js. It should probably reload the page in this case.\n            return;\n        }\n        // TODO-APP: this case happens when pushState/replaceState was called outside of Next.js or when the history entry was pushed by the old router.\n        // It reloads the page in this case but we might have to revisit this as the old router ignores it.\n        if (!state.__NA) {\n            window.location.reload();\n            return;\n        }\n        // @ts-ignore useTransition exists\n        // TODO-APP: Ideally the back button should not use startTransition as it should apply the updates synchronously\n        // Without startTransition works if the cache is there for this path\n        _react.default.startTransition(()=>{\n            dispatch({\n                type: _reducer.ACTION_RESTORE,\n                url: new URL(window.location.href),\n                tree: state.tree\n            });\n        });\n    }, [\n        dispatch\n    ]);\n    // Register popstate event to call onPopstate.\n    (0, _react).useEffect(()=>{\n        window.addEventListener(\"popstate\", onPopState);\n        return ()=>{\n            window.removeEventListener(\"popstate\", onPopState);\n        };\n    }, [\n        onPopState\n    ]);\n    return /*#__PURE__*/ _react.default.createElement(_hooksClientContext.PathnameContext.Provider, {\n        value: pathname\n    }, /*#__PURE__*/ _react.default.createElement(_hooksClientContext.SearchParamsContext.Provider, {\n        value: searchParams\n    }, /*#__PURE__*/ _react.default.createElement(_appRouterContext.GlobalLayoutRouterContext.Provider, {\n        value: {\n            changeByServerResponse,\n            tree,\n            focusAndScrollRef\n        }\n    }, /*#__PURE__*/ _react.default.createElement(_appRouterContext.AppRouterContext.Provider, {\n        value: appRouter\n    }, /*#__PURE__*/ _react.default.createElement(_appRouterContext.LayoutRouterContext.Provider, {\n        value: {\n            childNodes: cache.parallelRoutes,\n            tree: tree,\n            // Root node always has `url`\n            // Provided in AppTreeContext to ensure it can be overwritten in layout-router\n            url: canonicalUrl\n        }\n    }, HotReloader ? /*#__PURE__*/ _react.default.createElement(HotReloader, {\n        assetPrefix: assetPrefix\n    }, initialHead, cache.subTreeData) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, initialHead, cache.subTreeData))))));\n}\n_s(Router, \"yWCtvIH/OEoTmoHU249b5/prOjk=\");\n_c1 = Router;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=app-router.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"AppRouter\");\n$RefreshReg$(_c1, \"Router\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/app-router.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/error-boundary.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/client/components/error-boundary.js ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ErrorBoundary = ErrorBoundary;\nexports.GlobalErrorComponent = GlobalErrorComponent;\nvar _interop_require_default = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_default.js */ \"./node_modules/@swc/helpers/lib/_interop_require_default.js\")[\"default\"]);\nvar _react = _interop_require_default(__webpack_require__(/*! react */ \"./node_modules/next/dist/compiled/react/index.js\"));\n/**\n * Handles errors through `getDerivedStateFromError`.\n * Renders the provided error component and provides a way to `reset` the error boundary state.\n */ class ErrorBoundaryHandler extends _react.default.Component {\n    static getDerivedStateFromError(error) {\n        return {\n            error\n        };\n    }\n    render() {\n        if (this.state.error) {\n            return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, this.props.errorStyles, /*#__PURE__*/ _react.default.createElement(this.props.errorComponent, {\n                error: this.state.error,\n                reset: this.reset\n            }));\n        }\n        return this.props.children;\n    }\n    constructor(props){\n        super(props);\n        this.reset = ()=>{\n            this.setState({\n                error: null\n            });\n        };\n        this.state = {\n            error: null\n        };\n    }\n}\nfunction ErrorBoundary(param) {\n    let { errorComponent , errorStyles , children  } = param;\n    if (errorComponent) {\n        return /*#__PURE__*/ _react.default.createElement(ErrorBoundaryHandler, {\n            errorComponent: errorComponent,\n            errorStyles: errorStyles\n        }, children);\n    }\n    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, children);\n}\n_c = ErrorBoundary;\nconst styles = {\n    error: {\n        fontFamily: '-apple-system, BlinkMacSystemFont, Roboto, \"Segoe UI\", \"Fira Sans\", Avenir, \"Helvetica Neue\", \"Lucida Grande\", sans-serif',\n        height: \"100vh\",\n        textAlign: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    desc: {\n        display: \"inline-block\",\n        textAlign: \"left\",\n        lineHeight: \"49px\",\n        height: \"49px\",\n        verticalAlign: \"middle\"\n    },\n    h2: {\n        fontSize: \"14px\",\n        fontWeight: \"normal\",\n        lineHeight: \"49px\",\n        margin: 0,\n        padding: 0\n    }\n};\nfunction GlobalErrorComponent() {\n    return /*#__PURE__*/ _react.default.createElement(\"html\", null, /*#__PURE__*/ _react.default.createElement(\"body\", null, /*#__PURE__*/ _react.default.createElement(\"div\", {\n        style: styles.error\n    }, /*#__PURE__*/ _react.default.createElement(\"div\", {\n        style: styles.desc\n    }, /*#__PURE__*/ _react.default.createElement(\"h2\", {\n        style: styles.h2\n    }, \"Application error: a client-side exception has occurred (see the browser console for more information).\")))));\n}\n_c1 = GlobalErrorComponent;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=error-boundary.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"ErrorBoundary\");\n$RefreshReg$(_c1, \"GlobalErrorComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2Vycm9yLWJvdW5kYXJ5LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTyxJQUFJO0FBQ2YsQ0FBQyxFQUFDO0FBQ0ZELHFCQUFxQixHQUFHRTtBQUN4QkYsNEJBQTRCLEdBQUdHO0FBQy9CLElBQUlDLDJCQUEyQkMsbUpBQStEO0FBQzlGLElBQUlFLFNBQVNILHlCQUF5QkMsbUJBQU9BLENBQUMsK0RBQU87QUFDckQ7OztDQUdDLEdBQUcsTUFBTUcsNkJBQTZCRCxPQUFPRCxPQUFPLENBQUNHLFNBQVM7SUFDM0QsT0FBT0MseUJBQXlCQyxLQUFLLEVBQUU7UUFDbkMsT0FBTztZQUNIQTtRQUNKO0lBQ0o7SUFDQUMsU0FBUztRQUNMLElBQUksSUFBSSxDQUFDQyxLQUFLLENBQUNGLEtBQUssRUFBRTtZQUNsQixPQUFPLFdBQVcsR0FBR0osT0FBT0QsT0FBTyxDQUFDUSxhQUFhLENBQUNQLE9BQU9ELE9BQU8sQ0FBQ1MsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsV0FBVyxFQUFFLFdBQVcsR0FBR1YsT0FBT0QsT0FBTyxDQUFDUSxhQUFhLENBQUMsSUFBSSxDQUFDRSxLQUFLLENBQUNFLGNBQWMsRUFBRTtnQkFDM0tQLE9BQU8sSUFBSSxDQUFDRSxLQUFLLENBQUNGLEtBQUs7Z0JBQ3ZCUSxPQUFPLElBQUksQ0FBQ0EsS0FBSztZQUNyQjtRQUNKLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQ0gsS0FBSyxDQUFDSSxRQUFRO0lBQzlCO0lBQ0FDLFlBQVlMLEtBQUssQ0FBQztRQUNkLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNHLEtBQUssR0FBRyxJQUFJO1lBQ2IsSUFBSSxDQUFDRyxRQUFRLENBQUM7Z0JBQ1ZYLE9BQU8sSUFBSTtZQUNmO1FBQ0o7UUFDQSxJQUFJLENBQUNFLEtBQUssR0FBRztZQUNURixPQUFPLElBQUk7UUFDZjtJQUNKO0FBQ0o7QUFDQSxTQUFTVCxjQUFjLEtBQTRDLEVBQUU7UUFBOUMsRUFBRWdCLGVBQWMsRUFBR0QsWUFBVyxFQUFHRyxTQUFRLEVBQUcsR0FBNUM7SUFDbkIsSUFBSUYsZ0JBQWdCO1FBQ2hCLE9BQU8sV0FBVyxHQUFHWCxPQUFPRCxPQUFPLENBQUNRLGFBQWEsQ0FBQ04sc0JBQXNCO1lBQ3BFVSxnQkFBZ0JBO1lBQ2hCRCxhQUFhQTtRQUNqQixHQUFHRztJQUNQLENBQUM7SUFDRCxPQUFPLFdBQVcsR0FBR2IsT0FBT0QsT0FBTyxDQUFDUSxhQUFhLENBQUNQLE9BQU9ELE9BQU8sQ0FBQ1MsUUFBUSxFQUFFLElBQUksRUFBRUs7QUFDckY7S0FSU2xCO0FBU1QsTUFBTXFCLFNBQVM7SUFDWFosT0FBTztRQUNIYSxZQUFZO1FBQ1pDLFFBQVE7UUFDUkMsV0FBVztRQUNYQyxTQUFTO1FBQ1RDLGVBQWU7UUFDZkMsWUFBWTtRQUNaQyxnQkFBZ0I7SUFDcEI7SUFDQUMsTUFBTTtRQUNGSixTQUFTO1FBQ1RELFdBQVc7UUFDWE0sWUFBWTtRQUNaUCxRQUFRO1FBQ1JRLGVBQWU7SUFDbkI7SUFDQUMsSUFBSTtRQUNBQyxVQUFVO1FBQ1ZDLFlBQVk7UUFDWkosWUFBWTtRQUNaSyxRQUFRO1FBQ1JDLFNBQVM7SUFDYjtBQUNKO0FBQ0EsU0FBU25DLHVCQUF1QjtJQUM1QixPQUFPLFdBQVcsR0FBR0ksT0FBT0QsT0FBTyxDQUFDUSxhQUFhLENBQUMsUUFBUSxJQUFJLEVBQUUsV0FBVyxHQUFHUCxPQUFPRCxPQUFPLENBQUNRLGFBQWEsQ0FBQyxRQUFRLElBQUksRUFBRSxXQUFXLEdBQUdQLE9BQU9ELE9BQU8sQ0FBQ1EsYUFBYSxDQUFDLE9BQU87UUFDdkt5QixPQUFPaEIsT0FBT1osS0FBSztJQUN2QixHQUFHLFdBQVcsR0FBR0osT0FBT0QsT0FBTyxDQUFDUSxhQUFhLENBQUMsT0FBTztRQUNqRHlCLE9BQU9oQixPQUFPUSxJQUFJO0lBQ3RCLEdBQUcsV0FBVyxHQUFHeEIsT0FBT0QsT0FBTyxDQUFDUSxhQUFhLENBQUMsTUFBTTtRQUNoRHlCLE9BQU9oQixPQUFPVyxFQUFFO0lBQ3BCLEdBQUc7QUFDUDtNQVJTL0I7QUFVVCxJQUFJLENBQUMsT0FBT0gsUUFBUU0sT0FBTyxLQUFLLGNBQWUsT0FBT04sUUFBUU0sT0FBTyxLQUFLLFlBQVlOLFFBQVFNLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT04sUUFBUU0sT0FBTyxDQUFDa0MsVUFBVSxLQUFLLGFBQWE7SUFDcksxQyxPQUFPQyxjQUFjLENBQUNDLFFBQVFNLE9BQU8sRUFBRSxjQUFjO1FBQUVMLE9BQU8sSUFBSTtJQUFDO0lBQ25FSCxPQUFPMkMsTUFBTSxDQUFDekMsUUFBUU0sT0FBTyxFQUFFTjtJQUMvQjBDLE9BQU8xQyxPQUFPLEdBQUdBLFFBQVFNLE9BQU87QUFDbEMsQ0FBQyxDQUVELDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2Vycm9yLWJvdW5kYXJ5LmpzPzc2OTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkVycm9yQm91bmRhcnkgPSBFcnJvckJvdW5kYXJ5O1xuZXhwb3J0cy5HbG9iYWxFcnJvckNvbXBvbmVudCA9IEdsb2JhbEVycm9yQ29tcG9uZW50O1xudmFyIF9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdCA9IHJlcXVpcmUoXCJAc3djL2hlbHBlcnMvbGliL19pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdC5qc1wiKS5kZWZhdWx0O1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuLyoqXG4gKiBIYW5kbGVzIGVycm9ycyB0aHJvdWdoIGBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3JgLlxuICogUmVuZGVycyB0aGUgcHJvdmlkZWQgZXJyb3IgY29tcG9uZW50IGFuZCBwcm92aWRlcyBhIHdheSB0byBgcmVzZXRgIHRoZSBlcnJvciBib3VuZGFyeSBzdGF0ZS5cbiAqLyBjbGFzcyBFcnJvckJvdW5kYXJ5SGFuZGxlciBleHRlbmRzIF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCB7XG4gICAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgdGhpcy5wcm9wcy5lcnJvclN0eWxlcywgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMuZXJyb3JDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICBlcnJvcjogdGhpcy5zdGF0ZS5lcnJvcixcbiAgICAgICAgICAgICAgICByZXNldDogdGhpcy5yZXNldFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5yZXNldCA9ICgpPT57XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIEVycm9yQm91bmRhcnkoeyBlcnJvckNvbXBvbmVudCAsIGVycm9yU3R5bGVzICwgY2hpbGRyZW4gIH0pIHtcbiAgICBpZiAoZXJyb3JDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChFcnJvckJvdW5kYXJ5SGFuZGxlciwge1xuICAgICAgICAgICAgZXJyb3JDb21wb25lbnQ6IGVycm9yQ29tcG9uZW50LFxuICAgICAgICAgICAgZXJyb3JTdHlsZXM6IGVycm9yU3R5bGVzXG4gICAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xufVxuY29uc3Qgc3R5bGVzID0ge1xuICAgIGVycm9yOiB7XG4gICAgICAgIGZvbnRGYW1pbHk6ICctYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFJvYm90bywgXCJTZWdvZSBVSVwiLCBcIkZpcmEgU2Fuc1wiLCBBdmVuaXIsIFwiSGVsdmV0aWNhIE5ldWVcIiwgXCJMdWNpZGEgR3JhbmRlXCIsIHNhbnMtc2VyaWYnLFxuICAgICAgICBoZWlnaHQ6ICcxMDB2aCcsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICB9LFxuICAgIGRlc2M6IHtcbiAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAnNDlweCcsXG4gICAgICAgIGhlaWdodDogJzQ5cHgnLFxuICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xuICAgIH0sXG4gICAgaDI6IHtcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgZm9udFdlaWdodDogJ25vcm1hbCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICc0OXB4JyxcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICBwYWRkaW5nOiAwXG4gICAgfVxufTtcbmZ1bmN0aW9uIEdsb2JhbEVycm9yQ29tcG9uZW50KCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJodG1sXCIsIG51bGwsIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImJvZHlcIiwgbnVsbCwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5lcnJvclxuICAgIH0sIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMuZGVzY1xuICAgIH0sIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImgyXCIsIHtcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5oMlxuICAgIH0sIFwiQXBwbGljYXRpb24gZXJyb3I6IGEgY2xpZW50LXNpZGUgZXhjZXB0aW9uIGhhcyBvY2N1cnJlZCAoc2VlIHRoZSBicm93c2VyIGNvbnNvbGUgZm9yIG1vcmUgaW5mb3JtYXRpb24pLlwiKSkpKSk7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLWJvdW5kYXJ5LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkVycm9yQm91bmRhcnkiLCJHbG9iYWxFcnJvckNvbXBvbmVudCIsIl9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdCIsInJlcXVpcmUiLCJkZWZhdWx0IiwiX3JlYWN0IiwiRXJyb3JCb3VuZGFyeUhhbmRsZXIiLCJDb21wb25lbnQiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJlcnJvciIsInJlbmRlciIsInN0YXRlIiwiY3JlYXRlRWxlbWVudCIsIkZyYWdtZW50IiwicHJvcHMiLCJlcnJvclN0eWxlcyIsImVycm9yQ29tcG9uZW50IiwicmVzZXQiLCJjaGlsZHJlbiIsImNvbnN0cnVjdG9yIiwic2V0U3RhdGUiLCJzdHlsZXMiLCJmb250RmFtaWx5IiwiaGVpZ2h0IiwidGV4dEFsaWduIiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJkZXNjIiwibGluZUhlaWdodCIsInZlcnRpY2FsQWxpZ24iLCJoMiIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsIm1hcmdpbiIsInBhZGRpbmciLCJzdHlsZSIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/error-boundary.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/infinite-promise.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/client/components/infinite-promise.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createInfinitePromise = createInfinitePromise;\n/**\n * Used to cache in createInfinitePromise\n */ let infinitePromise;\nfunction createInfinitePromise() {\n    if (!infinitePromise) {\n        // Only create the Promise once\n        infinitePromise = new Promise(()=>{\n        // This is used to debug when the rendering is never updated.\n        // setTimeout(() => {\n        //   infinitePromise = new Error('Infinite promise')\n        //   resolve()\n        // }, 5000)\n        });\n    }\n    return infinitePromise;\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=infinite-promise.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2luZmluaXRlLXByb21pc2UuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPLElBQUk7QUFDZixDQUFDLEVBQUM7QUFDRkQsNkJBQTZCLEdBQUdFO0FBQ2hDOztDQUVDLEdBQUcsSUFBSUM7QUFDUixTQUFTRCx3QkFBd0I7SUFDN0IsSUFBSSxDQUFDQyxpQkFBaUI7UUFDbEIsK0JBQStCO1FBQy9CQSxrQkFBa0IsSUFBSUMsUUFBUSxJQUFJO1FBQ2xDLDZEQUE2RDtRQUM3RCxxQkFBcUI7UUFDckIsb0RBQW9EO1FBQ3BELGNBQWM7UUFDZCxXQUFXO1FBQ1g7SUFDSixDQUFDO0lBQ0QsT0FBT0Q7QUFDWDtBQUVBLElBQUksQ0FBQyxPQUFPSCxRQUFRSyxPQUFPLEtBQUssY0FBZSxPQUFPTCxRQUFRSyxPQUFPLEtBQUssWUFBWUwsUUFBUUssT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPTCxRQUFRSyxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLUixPQUFPQyxjQUFjLENBQUNDLFFBQVFLLE9BQU8sRUFBRSxjQUFjO1FBQUVKLE9BQU8sSUFBSTtJQUFDO0lBQ25FSCxPQUFPUyxNQUFNLENBQUNQLFFBQVFLLE9BQU8sRUFBRUw7SUFDL0JRLE9BQU9SLE9BQU8sR0FBR0EsUUFBUUssT0FBTztBQUNsQyxDQUFDLENBRUQsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvaW5maW5pdGUtcHJvbWlzZS5qcz83MmZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGVJbmZpbml0ZVByb21pc2UgPSBjcmVhdGVJbmZpbml0ZVByb21pc2U7XG4vKipcbiAqIFVzZWQgdG8gY2FjaGUgaW4gY3JlYXRlSW5maW5pdGVQcm9taXNlXG4gKi8gbGV0IGluZmluaXRlUHJvbWlzZTtcbmZ1bmN0aW9uIGNyZWF0ZUluZmluaXRlUHJvbWlzZSgpIHtcbiAgICBpZiAoIWluZmluaXRlUHJvbWlzZSkge1xuICAgICAgICAvLyBPbmx5IGNyZWF0ZSB0aGUgUHJvbWlzZSBvbmNlXG4gICAgICAgIGluZmluaXRlUHJvbWlzZSA9IG5ldyBQcm9taXNlKCgpPT57XG4gICAgICAgIC8vIFRoaXMgaXMgdXNlZCB0byBkZWJ1ZyB3aGVuIHRoZSByZW5kZXJpbmcgaXMgbmV2ZXIgdXBkYXRlZC5cbiAgICAgICAgLy8gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIC8vICAgaW5maW5pdGVQcm9taXNlID0gbmV3IEVycm9yKCdJbmZpbml0ZSBwcm9taXNlJylcbiAgICAgICAgLy8gICByZXNvbHZlKClcbiAgICAgICAgLy8gfSwgNTAwMClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBpbmZpbml0ZVByb21pc2U7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZmluaXRlLXByb21pc2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3JlYXRlSW5maW5pdGVQcm9taXNlIiwiaW5maW5pdGVQcm9taXNlIiwiUHJvbWlzZSIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/infinite-promise.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/layout-router.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/components/layout-router.js ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = OuterLayoutRouter;\nexports.InnerLayoutRouter = InnerLayoutRouter;\nvar _extends = (__webpack_require__(/*! @swc/helpers/lib/_extends.js */ \"./node_modules/@swc/helpers/lib/_extends.js\")[\"default\"]);\nvar _interop_require_wildcard = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_wildcard.js */ \"./node_modules/@swc/helpers/lib/_interop_require_wildcard.js\")[\"default\"]);\nvar _react = _interop_require_wildcard(__webpack_require__(/*! react */ \"./node_modules/next/dist/compiled/react/index.js\"));\nvar _appRouterContext = __webpack_require__(/*! ../../shared/lib/app-router-context */ \"./node_modules/next/dist/shared/lib/app-router-context.js\");\nvar _appRouter = __webpack_require__(/*! ./app-router */ \"./node_modules/next/dist/client/components/app-router.js\");\nvar _infinitePromise = __webpack_require__(/*! ./infinite-promise */ \"./node_modules/next/dist/client/components/infinite-promise.js\");\nvar _errorBoundary = __webpack_require__(/*! ./error-boundary */ \"./node_modules/next/dist/client/components/error-boundary.js\");\nvar _matchSegments = __webpack_require__(/*! ./match-segments */ \"./node_modules/next/dist/client/components/match-segments.js\");\nvar _navigation = __webpack_require__(/*! ./navigation */ \"./node_modules/next/dist/client/components/navigation.js\");\nfunction OuterLayoutRouter(param) {\n    let { parallelRouterKey , segmentPath , childProp , error , errorStyles , templateStyles , loading , loadingStyles , hasLoading , template , notFound , notFoundStyles , rootLayoutIncluded  } = param;\n    _s();\n    const context = (0, _react).useContext(_appRouterContext.LayoutRouterContext);\n    if (!context) {\n        throw new Error(\"invariant expected layout router to be mounted\");\n    }\n    const { childNodes , tree , url  } = context;\n    // Get the current parallelRouter cache node\n    let childNodesForParallelRouter = childNodes.get(parallelRouterKey);\n    // If the parallel router cache node does not exist yet, create it.\n    // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.\n    if (!childNodesForParallelRouter) {\n        childNodes.set(parallelRouterKey, new Map());\n        childNodesForParallelRouter = childNodes.get(parallelRouterKey);\n    }\n    // Get the active segment in the tree\n    // The reason arrays are used in the data format is that these are transferred from the server to the browser so it's optimized to save bytes.\n    const treeSegment = tree[1][parallelRouterKey][0];\n    const childPropSegment = Array.isArray(childProp.segment) ? childProp.segment[1] : childProp.segment;\n    // If segment is an array it's a dynamic route and we want to read the dynamic route value as the segment to get from the cache.\n    const currentChildSegment = Array.isArray(treeSegment) ? treeSegment[1] : treeSegment;\n    /**\n   * Decides which segments to keep rendering, all segments that are not active will be wrapped in `<Offscreen>`.\n   */ // TODO-APP: Add handling of `<Offscreen>` when it's available.\n    const preservedSegments = [\n        currentChildSegment\n    ];\n    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, preservedSegments.map((preservedSegment)=>{\n        return(/*\n            - Error boundary\n              - Only renders error boundary if error component is provided.\n              - Rendered for each segment to ensure they have their own error state.\n            - Loading boundary\n              - Only renders suspense boundary if loading components is provided.\n              - Rendered for each segment to ensure they have their own loading state.\n              - Passed to the router during rendering to ensure it can be immediately rendered when suspending on a Flight fetch.\n          */ /*#__PURE__*/ _react.default.createElement(_appRouterContext.TemplateContext.Provider, {\n            key: preservedSegment,\n            value: /*#__PURE__*/ _react.default.createElement(_errorBoundary.ErrorBoundary, {\n                errorComponent: error,\n                errorStyles: errorStyles\n            }, /*#__PURE__*/ _react.default.createElement(LoadingBoundary, {\n                hasLoading: hasLoading,\n                loading: loading,\n                loadingStyles: loadingStyles\n            }, /*#__PURE__*/ _react.default.createElement(NotFoundBoundary, {\n                notFound: notFound,\n                notFoundStyles: notFoundStyles\n            }, /*#__PURE__*/ _react.default.createElement(RedirectBoundary, null, /*#__PURE__*/ _react.default.createElement(InnerLayoutRouter, {\n                parallelRouterKey: parallelRouterKey,\n                url: url,\n                tree: tree,\n                childNodes: childNodesForParallelRouter,\n                childProp: childPropSegment === preservedSegment ? childProp : null,\n                segmentPath: segmentPath,\n                path: preservedSegment,\n                isActive: currentChildSegment === preservedSegment,\n                rootLayoutIncluded: rootLayoutIncluded\n            })))))\n        }, /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, templateStyles, template)));\n    }));\n}\n_s(OuterLayoutRouter, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n_c = OuterLayoutRouter;\n\"use client\";\n/**\n * Add refetch marker to router state at the point of the current layout segment.\n * This ensures the response returned is not further down than the current layout segment.\n */ function walkAddRefetch(segmentPathToWalk, treeToRecreate) {\n    if (segmentPathToWalk) {\n        const [segment, parallelRouteKey] = segmentPathToWalk;\n        const isLast = segmentPathToWalk.length === 2;\n        if ((0, _matchSegments).matchSegment(treeToRecreate[0], segment)) {\n            if (treeToRecreate[1].hasOwnProperty(parallelRouteKey)) {\n                if (isLast) {\n                    const subTree = walkAddRefetch(undefined, treeToRecreate[1][parallelRouteKey]);\n                    return [\n                        treeToRecreate[0],\n                        _extends({}, treeToRecreate[1], {\n                            [parallelRouteKey]: [\n                                subTree[0],\n                                subTree[1],\n                                subTree[2],\n                                \"refetch\"\n                            ]\n                        })\n                    ];\n                }\n                return [\n                    treeToRecreate[0],\n                    _extends({}, treeToRecreate[1], {\n                        [parallelRouteKey]: walkAddRefetch(segmentPathToWalk.slice(2), treeToRecreate[1][parallelRouteKey])\n                    })\n                ];\n            }\n        }\n    }\n    return treeToRecreate;\n}\n/**\n * Check if the top of the HTMLElement is in the viewport.\n */ function topOfElementInViewport(element) {\n    const rect = element.getBoundingClientRect();\n    return rect.top >= 0;\n}\nfunction InnerLayoutRouter(param) {\n    let { parallelRouterKey , url , childNodes , childProp , segmentPath , tree , // isActive,\n    path , rootLayoutIncluded  } = param;\n    _s1();\n    const context = (0, _react).useContext(_appRouterContext.GlobalLayoutRouterContext);\n    if (!context) {\n        throw new Error(\"invariant global layout router not mounted\");\n    }\n    const { changeByServerResponse , tree: fullTree , focusAndScrollRef  } = context;\n    const focusAndScrollElementRef = (0, _react).useRef(null);\n    (0, _react).useEffect(()=>{\n        // Handle scroll and focus, it's only applied once in the first useEffect that triggers that changed.\n        if (focusAndScrollRef.apply && focusAndScrollElementRef.current) {\n            // State is mutated to ensure that the focus and scroll is applied only once.\n            focusAndScrollRef.apply = false;\n            // Set focus on the element\n            focusAndScrollElementRef.current.focus();\n            // Only scroll into viewport when the layout is not visible currently.\n            if (!topOfElementInViewport(focusAndScrollElementRef.current)) {\n                const htmlElement = document.documentElement;\n                const existing = htmlElement.style.scrollBehavior;\n                htmlElement.style.scrollBehavior = \"auto\";\n                focusAndScrollElementRef.current.scrollIntoView();\n                htmlElement.style.scrollBehavior = existing;\n            }\n        }\n    }, [\n        focusAndScrollRef\n    ]);\n    // Read segment path from the parallel router cache node.\n    let childNode = childNodes.get(path);\n    // If childProp is available this means it's the Flight / SSR case.\n    if (childProp && // TODO-APP: verify if this can be null based on user code\n    childProp.current !== null) {\n        if (childNode && childNode.status === _appRouterContext.CacheStates.LAZYINITIALIZED) {\n            // @ts-expect-error TODO-APP: handle changing of the type\n            childNode.status = _appRouterContext.CacheStates.READY;\n            // @ts-expect-error TODO-APP: handle changing of the type\n            childNode.subTreeData = childProp.current;\n            // Mutates the prop in order to clean up the memory associated with the subTreeData as it is now part of the cache.\n            childProp.current = null;\n        } else {\n            // Add the segment's subTreeData to the cache.\n            // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.\n            childNodes.set(path, {\n                status: _appRouterContext.CacheStates.READY,\n                data: null,\n                subTreeData: childProp.current,\n                parallelRoutes: new Map()\n            });\n            // Mutates the prop in order to clean up the memory associated with the subTreeData as it is now part of the cache.\n            childProp.current = null;\n            // In the above case childNode was set on childNodes, so we have to get it from the cacheNodes again.\n            childNode = childNodes.get(path);\n        }\n    }\n    // When childNode is not available during rendering client-side we need to fetch it from the server.\n    if (!childNode) {\n        /**\n     * Router state with refetch marker added\n     */ // TODO-APP: remove ''\n        const refetchTree = walkAddRefetch([\n            \"\",\n            ...segmentPath\n        ], fullTree);\n        /**\n     * Flight data fetch kicked off during render and put into the cache.\n     */ childNodes.set(path, {\n            status: _appRouterContext.CacheStates.DATAFETCH,\n            data: (0, _appRouter).fetchServerResponse(new URL(url, location.origin), refetchTree),\n            subTreeData: null,\n            parallelRoutes: new Map()\n        });\n        // In the above case childNode was set on childNodes, so we have to get it from the cacheNodes again.\n        childNode = childNodes.get(path);\n    }\n    // This case should never happen so it throws an error. It indicates there's a bug in the Next.js.\n    if (!childNode) {\n        throw new Error(\"Child node should always exist\");\n    }\n    // This case should never happen so it throws an error. It indicates there's a bug in the Next.js.\n    if (childNode.subTreeData && childNode.data) {\n        throw new Error(\"Child node should not have both subTreeData and data\");\n    }\n    // If cache node has a data request we have to unwrap response by `use` and update the cache.\n    if (childNode.data) {\n        // TODO-APP: error case\n        /**\n     * Flight response data\n     */ // When the data has not resolved yet `use` will suspend here.\n        const [flightData, overrideCanonicalUrl] = (0, _react).use(childNode.data);\n        // Handle case when navigating to page in `pages` from `app`\n        if (typeof flightData === \"string\") {\n            window.location.href = url;\n            return null;\n        }\n        // segmentPath from the server does not match the layout's segmentPath\n        childNode.data = null;\n        // setTimeout is used to start a new transition during render, this is an intentional hack around React.\n        setTimeout(()=>{\n            // @ts-ignore startTransition exists\n            _react.default.startTransition(()=>{\n                // TODO-APP: handle redirect\n                changeByServerResponse(fullTree, flightData, overrideCanonicalUrl);\n            });\n        });\n        // Suspend infinitely as `changeByServerResponse` will cause a different part of the tree to be rendered.\n        (0, _react).use((0, _infinitePromise).createInfinitePromise());\n    }\n    // If cache node has no subTreeData and no data request we have to infinitely suspend as the data will likely flow in from another place.\n    // TODO-APP: double check users can't return null in a component that will kick in here.\n    if (!childNode.subTreeData) {\n        (0, _react).use((0, _infinitePromise).createInfinitePromise());\n    }\n    const subtree = /*#__PURE__*/ _react.default.createElement(_appRouterContext.LayoutRouterContext.Provider, {\n        value: {\n            tree: tree[1][parallelRouterKey],\n            childNodes: childNode.parallelRoutes,\n            // TODO-APP: overriding of url for parallel routes\n            url: url\n        }\n    }, childNode.subTreeData);\n    // Ensure root layout is not wrapped in a div as the root layout renders `<html>`\n    return rootLayoutIncluded ? /*#__PURE__*/ _react.default.createElement(\"div\", {\n        ref: focusAndScrollElementRef,\n        \"data-nextjs-scroll-focus-boundary\": \"\"\n    }, subtree) : subtree;\n}\n_s1(InnerLayoutRouter, \"JQanpc2hF1A904pZOh54fuThoYw=\");\n_c1 = InnerLayoutRouter;\n/**\n * Renders suspense boundary with the provided \"loading\" property as the fallback.\n * If no loading property is provided it renders the children without a suspense boundary.\n */ function LoadingBoundary(param) {\n    let { children , loading , loadingStyles , hasLoading  } = param;\n    if (hasLoading) {\n        return /*#__PURE__*/ _react.default.createElement(_react.default.Suspense, {\n            fallback: /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, loadingStyles, loading)\n        }, children);\n    }\n    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, children);\n}\n_c2 = LoadingBoundary;\nfunction HandleRedirect(param) {\n    let { redirect  } = param;\n    _s2();\n    const router = (0, _navigation).useRouter();\n    (0, _react).useEffect(()=>{\n        router.replace(redirect, {});\n    }, [\n        redirect,\n        router\n    ]);\n    return null;\n}\n_s2(HandleRedirect, \"vQduR7x+OPXj6PSmJyFnf+hU7bg=\");\n_c3 = HandleRedirect;\nclass RedirectErrorBoundary extends _react.default.Component {\n    static getDerivedStateFromError(error) {\n        var ref;\n        if ((ref = error.digest) == null ? void 0 : ref.startsWith(\"NEXT_REDIRECT\")) {\n            const url = error.digest.split(\";\")[1];\n            return {\n                redirect: url\n            };\n        }\n        // Re-throw if error is not for redirect\n        throw error;\n    }\n    render() {\n        const redirect = this.state.redirect;\n        if (redirect !== null) {\n            return /*#__PURE__*/ _react.default.createElement(HandleRedirect, {\n                redirect: redirect\n            });\n        }\n        return this.props.children;\n    }\n    constructor(props){\n        super(props);\n        this.state = {\n            redirect: null\n        };\n    }\n}\nfunction RedirectBoundary(param) {\n    let { children  } = param;\n    _s3();\n    const router = (0, _navigation).useRouter();\n    return /*#__PURE__*/ _react.default.createElement(RedirectErrorBoundary, {\n        router: router\n    }, children);\n}\n_s3(RedirectBoundary, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\");\n_c4 = RedirectBoundary;\nclass NotFoundErrorBoundary extends _react.default.Component {\n    static getDerivedStateFromError(error) {\n        if (error.digest === \"NEXT_NOT_FOUND\") {\n            return {\n                notFoundTriggered: true\n            };\n        }\n        // Re-throw if error is not for 404\n        throw error;\n    }\n    render() {\n        if (this.state.notFoundTriggered) {\n            return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(\"meta\", {\n                name: \"robots\",\n                content: \"noindex\"\n            }), this.props.notFoundStyles, this.props.notFound);\n        }\n        return this.props.children;\n    }\n    constructor(props){\n        super(props);\n        this.state = {\n            notFoundTriggered: false\n        };\n    }\n}\nfunction NotFoundBoundary(param) {\n    let { notFound , notFoundStyles , children  } = param;\n    return notFound ? /*#__PURE__*/ _react.default.createElement(NotFoundErrorBoundary, {\n        notFound: notFound,\n        notFoundStyles: notFoundStyles\n    }, children) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, children);\n}\n_c5 = NotFoundBoundary;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=layout-router.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"OuterLayoutRouter\");\n$RefreshReg$(_c1, \"InnerLayoutRouter\");\n$RefreshReg$(_c2, \"LoadingBoundary\");\n$RefreshReg$(_c3, \"HandleRedirect\");\n$RefreshReg$(_c4, \"RedirectBoundary\");\n$RefreshReg$(_c5, \"NotFoundBoundary\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2xheW91dC1yb3V0ZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQ2E7O0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTyxJQUFJO0FBQ2YsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUdHO0FBQ2xCSCx5QkFBeUIsR0FBR0k7QUFDNUIsSUFBSUMsV0FBV0MsbUhBQStDO0FBQzlELElBQUlDLDRCQUE0QkQscUpBQWdFO0FBQ2hHLElBQUlFLFNBQVNELDBCQUEwQkQsbUJBQU9BLENBQUMsK0RBQU87QUFDdEQsSUFBSUcsb0JBQW9CSCxtQkFBT0EsQ0FBQyxzR0FBcUM7QUFDckUsSUFBSUksYUFBYUosbUJBQU9BLENBQUMsOEVBQWM7QUFDdkMsSUFBSUssbUJBQW1CTCxtQkFBT0EsQ0FBQywwRkFBb0I7QUFDbkQsSUFBSU0saUJBQWlCTixtQkFBT0EsQ0FBQyxzRkFBa0I7QUFDL0MsSUFBSU8saUJBQWlCUCxtQkFBT0EsQ0FBQyxzRkFBa0I7QUFDL0MsSUFBSVEsY0FBY1IsbUJBQU9BLENBQUMsOEVBQWM7QUFDeEMsU0FBU0gsa0JBQWtCLEtBQTBMLEVBQUU7UUFBNUwsRUFBRVksa0JBQWlCLEVBQUdDLFlBQVcsRUFBR0MsVUFBUyxFQUFHQyxNQUFLLEVBQUdDLFlBQVcsRUFBR0MsZUFBYyxFQUFHQyxRQUFPLEVBQUdDLGNBQWEsRUFBR0MsV0FBVSxFQUFHQyxTQUFRLEVBQUdDLFNBQVEsRUFBR0MsZUFBYyxFQUFHQyxtQkFBa0IsRUFBRyxHQUExTDs7SUFDdkIsTUFBTUMsVUFBVSxDQUFDLEdBQUdwQixNQUFNLEVBQUVxQixVQUFVLENBQUNwQixrQkFBa0JxQixtQkFBbUI7SUFDNUUsSUFBSSxDQUFDRixTQUFTO1FBQ1YsTUFBTSxJQUFJRyxNQUFNLGtEQUFrRDtJQUN0RSxDQUFDO0lBQ0QsTUFBTSxFQUFFQyxXQUFVLEVBQUdDLEtBQUksRUFBR0MsSUFBRyxFQUFHLEdBQUdOO0lBQ3JDLDRDQUE0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TzdJLE9BQU8sR0FBR0EsUUFBUUUsT0FBTztBQUNsQyxDQUFDLENBRUQseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvbGF5b3V0LXJvdXRlci5qcz8wYmZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBPdXRlckxheW91dFJvdXRlcjtcbmV4cG9ydHMuSW5uZXJMYXlvdXRSb3V0ZXIgPSBJbm5lckxheW91dFJvdXRlcjtcbnZhciBfZXh0ZW5kcyA9IHJlcXVpcmUoXCJAc3djL2hlbHBlcnMvbGliL19leHRlbmRzLmpzXCIpLmRlZmF1bHQ7XG52YXIgX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZCA9IHJlcXVpcmUoXCJAc3djL2hlbHBlcnMvbGliL19pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQuanNcIikuZGVmYXVsdDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2FwcFJvdXRlckNvbnRleHQgPSByZXF1aXJlKFwiLi4vLi4vc2hhcmVkL2xpYi9hcHAtcm91dGVyLWNvbnRleHRcIik7XG52YXIgX2FwcFJvdXRlciA9IHJlcXVpcmUoXCIuL2FwcC1yb3V0ZXJcIik7XG52YXIgX2luZmluaXRlUHJvbWlzZSA9IHJlcXVpcmUoXCIuL2luZmluaXRlLXByb21pc2VcIik7XG52YXIgX2Vycm9yQm91bmRhcnkgPSByZXF1aXJlKFwiLi9lcnJvci1ib3VuZGFyeVwiKTtcbnZhciBfbWF0Y2hTZWdtZW50cyA9IHJlcXVpcmUoXCIuL21hdGNoLXNlZ21lbnRzXCIpO1xudmFyIF9uYXZpZ2F0aW9uID0gcmVxdWlyZShcIi4vbmF2aWdhdGlvblwiKTtcbmZ1bmN0aW9uIE91dGVyTGF5b3V0Um91dGVyKHsgcGFyYWxsZWxSb3V0ZXJLZXkgLCBzZWdtZW50UGF0aCAsIGNoaWxkUHJvcCAsIGVycm9yICwgZXJyb3JTdHlsZXMgLCB0ZW1wbGF0ZVN0eWxlcyAsIGxvYWRpbmcgLCBsb2FkaW5nU3R5bGVzICwgaGFzTG9hZGluZyAsIHRlbXBsYXRlICwgbm90Rm91bmQgLCBub3RGb3VuZFN0eWxlcyAsIHJvb3RMYXlvdXRJbmNsdWRlZCAgfSkge1xuICAgIGNvbnN0IGNvbnRleHQgPSAoMCwgX3JlYWN0KS51c2VDb250ZXh0KF9hcHBSb3V0ZXJDb250ZXh0LkxheW91dFJvdXRlckNvbnRleHQpO1xuICAgIGlmICghY29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCBleHBlY3RlZCBsYXlvdXQgcm91dGVyIHRvIGJlIG1vdW50ZWQnKTtcbiAgICB9XG4gICAgY29uc3QgeyBjaGlsZE5vZGVzICwgdHJlZSAsIHVybCAgfSA9IGNvbnRleHQ7XG4gICAgLy8gR2V0IHRoZSBjdXJyZW50IHBhcmFsbGVsUm91dGVyIGNhY2hlIG5vZGVcbiAgICBsZXQgY2hpbGROb2Rlc0ZvclBhcmFsbGVsUm91dGVyID0gY2hpbGROb2Rlcy5nZXQocGFyYWxsZWxSb3V0ZXJLZXkpO1xuICAgIC8vIElmIHRoZSBwYXJhbGxlbCByb3V0ZXIgY2FjaGUgbm9kZSBkb2VzIG5vdCBleGlzdCB5ZXQsIGNyZWF0ZSBpdC5cbiAgICAvLyBUaGlzIHdyaXRlcyB0byB0aGUgY2FjaGUgd2hlbiB0aGVyZSBpcyBubyBpdGVtIGluIHRoZSBjYWNoZSB5ZXQuIEl0IG5ldmVyICpvdmVyd3JpdGVzKiBleGlzdGluZyBjYWNoZSBpdGVtcyB3aGljaCBpcyB3aHkgaXQncyBzYWZlIGluIGNvbmN1cnJlbnQgbW9kZS5cbiAgICBpZiAoIWNoaWxkTm9kZXNGb3JQYXJhbGxlbFJvdXRlcikge1xuICAgICAgICBjaGlsZE5vZGVzLnNldChwYXJhbGxlbFJvdXRlcktleSwgbmV3IE1hcCgpKTtcbiAgICAgICAgY2hpbGROb2Rlc0ZvclBhcmFsbGVsUm91dGVyID0gY2hpbGROb2Rlcy5nZXQocGFyYWxsZWxSb3V0ZXJLZXkpO1xuICAgIH1cbiAgICAvLyBHZXQgdGhlIGFjdGl2ZSBzZWdtZW50IGluIHRoZSB0cmVlXG4gICAgLy8gVGhlIHJlYXNvbiBhcnJheXMgYXJlIHVzZWQgaW4gdGhlIGRhdGEgZm9ybWF0IGlzIHRoYXQgdGhlc2UgYXJlIHRyYW5zZmVycmVkIGZyb20gdGhlIHNlcnZlciB0byB0aGUgYnJvd3NlciBzbyBpdCdzIG9wdGltaXplZCB0byBzYXZlIGJ5dGVzLlxuICAgIGNvbnN0IHRyZWVTZWdtZW50ID0gdHJlZVsxXVtwYXJhbGxlbFJvdXRlcktleV1bMF07XG4gICAgY29uc3QgY2hpbGRQcm9wU2VnbWVudCA9IEFycmF5LmlzQXJyYXkoY2hpbGRQcm9wLnNlZ21lbnQpID8gY2hpbGRQcm9wLnNlZ21lbnRbMV0gOiBjaGlsZFByb3Auc2VnbWVudDtcbiAgICAvLyBJZiBzZWdtZW50IGlzIGFuIGFycmF5IGl0J3MgYSBkeW5hbWljIHJvdXRlIGFuZCB3ZSB3YW50IHRvIHJlYWQgdGhlIGR5bmFtaWMgcm91dGUgdmFsdWUgYXMgdGhlIHNlZ21lbnQgdG8gZ2V0IGZyb20gdGhlIGNhY2hlLlxuICAgIGNvbnN0IGN1cnJlbnRDaGlsZFNlZ21lbnQgPSBBcnJheS5pc0FycmF5KHRyZWVTZWdtZW50KSA/IHRyZWVTZWdtZW50WzFdIDogdHJlZVNlZ21lbnQ7XG4gICAgLyoqXG4gICAqIERlY2lkZXMgd2hpY2ggc2VnbWVudHMgdG8ga2VlcCByZW5kZXJpbmcsIGFsbCBzZWdtZW50cyB0aGF0IGFyZSBub3QgYWN0aXZlIHdpbGwgYmUgd3JhcHBlZCBpbiBgPE9mZnNjcmVlbj5gLlxuICAgKi8gLy8gVE9ETy1BUFA6IEFkZCBoYW5kbGluZyBvZiBgPE9mZnNjcmVlbj5gIHdoZW4gaXQncyBhdmFpbGFibGUuXG4gICAgY29uc3QgcHJlc2VydmVkU2VnbWVudHMgPSBbXG4gICAgICAgIGN1cnJlbnRDaGlsZFNlZ21lbnRcbiAgICBdO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIHByZXNlcnZlZFNlZ21lbnRzLm1hcCgocHJlc2VydmVkU2VnbWVudCk9PntcbiAgICAgICAgcmV0dXJuKC8qXG4gICAgICAgICAgICAtIEVycm9yIGJvdW5kYXJ5XG4gICAgICAgICAgICAgIC0gT25seSByZW5kZXJzIGVycm9yIGJvdW5kYXJ5IGlmIGVycm9yIGNvbXBvbmVudCBpcyBwcm92aWRlZC5cbiAgICAgICAgICAgICAgLSBSZW5kZXJlZCBmb3IgZWFjaCBzZWdtZW50IHRvIGVuc3VyZSB0aGV5IGhhdmUgdGhlaXIgb3duIGVycm9yIHN0YXRlLlxuICAgICAgICAgICAgLSBMb2FkaW5nIGJvdW5kYXJ5XG4gICAgICAgICAgICAgIC0gT25seSByZW5kZXJzIHN1c3BlbnNlIGJvdW5kYXJ5IGlmIGxvYWRpbmcgY29tcG9uZW50cyBpcyBwcm92aWRlZC5cbiAgICAgICAgICAgICAgLSBSZW5kZXJlZCBmb3IgZWFjaCBzZWdtZW50IHRvIGVuc3VyZSB0aGV5IGhhdmUgdGhlaXIgb3duIGxvYWRpbmcgc3RhdGUuXG4gICAgICAgICAgICAgIC0gUGFzc2VkIHRvIHRoZSByb3V0ZXIgZHVyaW5nIHJlbmRlcmluZyB0byBlbnN1cmUgaXQgY2FuIGJlIGltbWVkaWF0ZWx5IHJlbmRlcmVkIHdoZW4gc3VzcGVuZGluZyBvbiBhIEZsaWdodCBmZXRjaC5cbiAgICAgICAgICAqLyAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2FwcFJvdXRlckNvbnRleHQuVGVtcGxhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgICAgICBrZXk6IHByZXNlcnZlZFNlZ21lbnQsXG4gICAgICAgICAgICB2YWx1ZTogLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9lcnJvckJvdW5kYXJ5LkVycm9yQm91bmRhcnksIHtcbiAgICAgICAgICAgICAgICBlcnJvckNvbXBvbmVudDogZXJyb3IsXG4gICAgICAgICAgICAgICAgZXJyb3JTdHlsZXM6IGVycm9yU3R5bGVzXG4gICAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTG9hZGluZ0JvdW5kYXJ5LCB7XG4gICAgICAgICAgICAgICAgaGFzTG9hZGluZzogaGFzTG9hZGluZyxcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiBsb2FkaW5nLFxuICAgICAgICAgICAgICAgIGxvYWRpbmdTdHlsZXM6IGxvYWRpbmdTdHlsZXNcbiAgICAgICAgICAgIH0sIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChOb3RGb3VuZEJvdW5kYXJ5LCB7XG4gICAgICAgICAgICAgICAgbm90Rm91bmQ6IG5vdEZvdW5kLFxuICAgICAgICAgICAgICAgIG5vdEZvdW5kU3R5bGVzOiBub3RGb3VuZFN0eWxlc1xuICAgICAgICAgICAgfSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlZGlyZWN0Qm91bmRhcnksIG51bGwsIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChJbm5lckxheW91dFJvdXRlciwge1xuICAgICAgICAgICAgICAgIHBhcmFsbGVsUm91dGVyS2V5OiBwYXJhbGxlbFJvdXRlcktleSxcbiAgICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgICB0cmVlOiB0cmVlLFxuICAgICAgICAgICAgICAgIGNoaWxkTm9kZXM6IGNoaWxkTm9kZXNGb3JQYXJhbGxlbFJvdXRlcixcbiAgICAgICAgICAgICAgICBjaGlsZFByb3A6IGNoaWxkUHJvcFNlZ21lbnQgPT09IHByZXNlcnZlZFNlZ21lbnQgPyBjaGlsZFByb3AgOiBudWxsLFxuICAgICAgICAgICAgICAgIHNlZ21lbnRQYXRoOiBzZWdtZW50UGF0aCxcbiAgICAgICAgICAgICAgICBwYXRoOiBwcmVzZXJ2ZWRTZWdtZW50LFxuICAgICAgICAgICAgICAgIGlzQWN0aXZlOiBjdXJyZW50Q2hpbGRTZWdtZW50ID09PSBwcmVzZXJ2ZWRTZWdtZW50LFxuICAgICAgICAgICAgICAgIHJvb3RMYXlvdXRJbmNsdWRlZDogcm9vdExheW91dEluY2x1ZGVkXG4gICAgICAgICAgICB9KSkpKSlcbiAgICAgICAgfSwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCB0ZW1wbGF0ZVN0eWxlcywgdGVtcGxhdGUpKSk7XG4gICAgfSkpO1xufVxuJ3VzZSBjbGllbnQnO1xuLyoqXG4gKiBBZGQgcmVmZXRjaCBtYXJrZXIgdG8gcm91dGVyIHN0YXRlIGF0IHRoZSBwb2ludCBvZiB0aGUgY3VycmVudCBsYXlvdXQgc2VnbWVudC5cbiAqIFRoaXMgZW5zdXJlcyB0aGUgcmVzcG9uc2UgcmV0dXJuZWQgaXMgbm90IGZ1cnRoZXIgZG93biB0aGFuIHRoZSBjdXJyZW50IGxheW91dCBzZWdtZW50LlxuICovIGZ1bmN0aW9uIHdhbGtBZGRSZWZldGNoKHNlZ21lbnRQYXRoVG9XYWxrLCB0cmVlVG9SZWNyZWF0ZSkge1xuICAgIGlmIChzZWdtZW50UGF0aFRvV2Fsaykge1xuICAgICAgICBjb25zdCBbc2VnbWVudCwgcGFyYWxsZWxSb3V0ZUtleV0gPSBzZWdtZW50UGF0aFRvV2FsaztcbiAgICAgICAgY29uc3QgaXNMYXN0ID0gc2VnbWVudFBhdGhUb1dhbGsubGVuZ3RoID09PSAyO1xuICAgICAgICBpZiAoKDAsIF9tYXRjaFNlZ21lbnRzKS5tYXRjaFNlZ21lbnQodHJlZVRvUmVjcmVhdGVbMF0sIHNlZ21lbnQpKSB7XG4gICAgICAgICAgICBpZiAodHJlZVRvUmVjcmVhdGVbMV0uaGFzT3duUHJvcGVydHkocGFyYWxsZWxSb3V0ZUtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNMYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YlRyZWUgPSB3YWxrQWRkUmVmZXRjaCh1bmRlZmluZWQsIHRyZWVUb1JlY3JlYXRlWzFdW3BhcmFsbGVsUm91dGVLZXldKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWVUb1JlY3JlYXRlWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHMoe30sIHRyZWVUb1JlY3JlYXRlWzFdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3BhcmFsbGVsUm91dGVLZXldOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlRyZWVbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlRyZWVbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlRyZWVbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWZldGNoJywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIFxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB0cmVlVG9SZWNyZWF0ZVswXSxcbiAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHMoe30sIHRyZWVUb1JlY3JlYXRlWzFdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbcGFyYWxsZWxSb3V0ZUtleV06IHdhbGtBZGRSZWZldGNoKHNlZ21lbnRQYXRoVG9XYWxrLnNsaWNlKDIpLCB0cmVlVG9SZWNyZWF0ZVsxXVtwYXJhbGxlbFJvdXRlS2V5XSlcbiAgICAgICAgICAgICAgICAgICAgfSksIFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRyZWVUb1JlY3JlYXRlO1xufVxuLyoqXG4gKiBDaGVjayBpZiB0aGUgdG9wIG9mIHRoZSBIVE1MRWxlbWVudCBpcyBpbiB0aGUgdmlld3BvcnQuXG4gKi8gZnVuY3Rpb24gdG9wT2ZFbGVtZW50SW5WaWV3cG9ydChlbGVtZW50KSB7XG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHJlY3QudG9wID49IDA7XG59XG5mdW5jdGlvbiBJbm5lckxheW91dFJvdXRlcih7IHBhcmFsbGVsUm91dGVyS2V5ICwgdXJsICwgY2hpbGROb2RlcyAsIGNoaWxkUHJvcCAsIHNlZ21lbnRQYXRoICwgdHJlZSAsIC8vIFRPRE8tQVBQOiBpbXBsZW1lbnQgYDxPZmZzY3JlZW4+YCB3aGVuIGF2YWlsYWJsZS5cbi8vIGlzQWN0aXZlLFxucGF0aCAsIHJvb3RMYXlvdXRJbmNsdWRlZCAgfSkge1xuICAgIGNvbnN0IGNvbnRleHQgPSAoMCwgX3JlYWN0KS51c2VDb250ZXh0KF9hcHBSb3V0ZXJDb250ZXh0Lkdsb2JhbExheW91dFJvdXRlckNvbnRleHQpO1xuICAgIGlmICghY29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCBnbG9iYWwgbGF5b3V0IHJvdXRlciBub3QgbW91bnRlZCcpO1xuICAgIH1cbiAgICBjb25zdCB7IGNoYW5nZUJ5U2VydmVyUmVzcG9uc2UgLCB0cmVlOiBmdWxsVHJlZSAsIGZvY3VzQW5kU2Nyb2xsUmVmICB9ID0gY29udGV4dDtcbiAgICBjb25zdCBmb2N1c0FuZFNjcm9sbEVsZW1lbnRSZWYgPSAoMCwgX3JlYWN0KS51c2VSZWYobnVsbCk7XG4gICAgKDAsIF9yZWFjdCkudXNlRWZmZWN0KCgpPT57XG4gICAgICAgIC8vIEhhbmRsZSBzY3JvbGwgYW5kIGZvY3VzLCBpdCdzIG9ubHkgYXBwbGllZCBvbmNlIGluIHRoZSBmaXJzdCB1c2VFZmZlY3QgdGhhdCB0cmlnZ2VycyB0aGF0IGNoYW5nZWQuXG4gICAgICAgIGlmIChmb2N1c0FuZFNjcm9sbFJlZi5hcHBseSAmJiBmb2N1c0FuZFNjcm9sbEVsZW1lbnRSZWYuY3VycmVudCkge1xuICAgICAgICAgICAgLy8gU3RhdGUgaXMgbXV0YXRlZCB0byBlbnN1cmUgdGhhdCB0aGUgZm9jdXMgYW5kIHNjcm9sbCBpcyBhcHBsaWVkIG9ubHkgb25jZS5cbiAgICAgICAgICAgIGZvY3VzQW5kU2Nyb2xsUmVmLmFwcGx5ID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBTZXQgZm9jdXMgb24gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgIGZvY3VzQW5kU2Nyb2xsRWxlbWVudFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAvLyBPbmx5IHNjcm9sbCBpbnRvIHZpZXdwb3J0IHdoZW4gdGhlIGxheW91dCBpcyBub3QgdmlzaWJsZSBjdXJyZW50bHkuXG4gICAgICAgICAgICBpZiAoIXRvcE9mRWxlbWVudEluVmlld3BvcnQoZm9jdXNBbmRTY3JvbGxFbGVtZW50UmVmLmN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaHRtbEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBodG1sRWxlbWVudC5zdHlsZS5zY3JvbGxCZWhhdmlvcjtcbiAgICAgICAgICAgICAgICBodG1sRWxlbWVudC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9ICdhdXRvJztcbiAgICAgICAgICAgICAgICBmb2N1c0FuZFNjcm9sbEVsZW1lbnRSZWYuY3VycmVudC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgICAgICAgIGh0bWxFbGVtZW50LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gZXhpc3Rpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbXG4gICAgICAgIGZvY3VzQW5kU2Nyb2xsUmVmXG4gICAgXSk7XG4gICAgLy8gUmVhZCBzZWdtZW50IHBhdGggZnJvbSB0aGUgcGFyYWxsZWwgcm91dGVyIGNhY2hlIG5vZGUuXG4gICAgbGV0IGNoaWxkTm9kZSA9IGNoaWxkTm9kZXMuZ2V0KHBhdGgpO1xuICAgIC8vIElmIGNoaWxkUHJvcCBpcyBhdmFpbGFibGUgdGhpcyBtZWFucyBpdCdzIHRoZSBGbGlnaHQgLyBTU1IgY2FzZS5cbiAgICBpZiAoY2hpbGRQcm9wICYmIC8vIFRPRE8tQVBQOiB2ZXJpZnkgaWYgdGhpcyBjYW4gYmUgbnVsbCBiYXNlZCBvbiB1c2VyIGNvZGVcbiAgICBjaGlsZFByb3AuY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5zdGF0dXMgPT09IF9hcHBSb3V0ZXJDb250ZXh0LkNhY2hlU3RhdGVzLkxBWllJTklUSUFMSVpFRCkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPLUFQUDogaGFuZGxlIGNoYW5naW5nIG9mIHRoZSB0eXBlXG4gICAgICAgICAgICBjaGlsZE5vZGUuc3RhdHVzID0gX2FwcFJvdXRlckNvbnRleHQuQ2FjaGVTdGF0ZXMuUkVBRFk7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE8tQVBQOiBoYW5kbGUgY2hhbmdpbmcgb2YgdGhlIHR5cGVcbiAgICAgICAgICAgIGNoaWxkTm9kZS5zdWJUcmVlRGF0YSA9IGNoaWxkUHJvcC5jdXJyZW50O1xuICAgICAgICAgICAgLy8gTXV0YXRlcyB0aGUgcHJvcCBpbiBvcmRlciB0byBjbGVhbiB1cCB0aGUgbWVtb3J5IGFzc29jaWF0ZWQgd2l0aCB0aGUgc3ViVHJlZURhdGEgYXMgaXQgaXMgbm93IHBhcnQgb2YgdGhlIGNhY2hlLlxuICAgICAgICAgICAgY2hpbGRQcm9wLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQWRkIHRoZSBzZWdtZW50J3Mgc3ViVHJlZURhdGEgdG8gdGhlIGNhY2hlLlxuICAgICAgICAgICAgLy8gVGhpcyB3cml0ZXMgdG8gdGhlIGNhY2hlIHdoZW4gdGhlcmUgaXMgbm8gaXRlbSBpbiB0aGUgY2FjaGUgeWV0LiBJdCBuZXZlciAqb3ZlcndyaXRlcyogZXhpc3RpbmcgY2FjaGUgaXRlbXMgd2hpY2ggaXMgd2h5IGl0J3Mgc2FmZSBpbiBjb25jdXJyZW50IG1vZGUuXG4gICAgICAgICAgICBjaGlsZE5vZGVzLnNldChwYXRoLCB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBfYXBwUm91dGVyQ29udGV4dC5DYWNoZVN0YXRlcy5SRUFEWSxcbiAgICAgICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgICAgIHN1YlRyZWVEYXRhOiBjaGlsZFByb3AuY3VycmVudCxcbiAgICAgICAgICAgICAgICBwYXJhbGxlbFJvdXRlczogbmV3IE1hcCgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIE11dGF0ZXMgdGhlIHByb3AgaW4gb3JkZXIgdG8gY2xlYW4gdXAgdGhlIG1lbW9yeSBhc3NvY2lhdGVkIHdpdGggdGhlIHN1YlRyZWVEYXRhIGFzIGl0IGlzIG5vdyBwYXJ0IG9mIHRoZSBjYWNoZS5cbiAgICAgICAgICAgIGNoaWxkUHJvcC5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIC8vIEluIHRoZSBhYm92ZSBjYXNlIGNoaWxkTm9kZSB3YXMgc2V0IG9uIGNoaWxkTm9kZXMsIHNvIHdlIGhhdmUgdG8gZ2V0IGl0IGZyb20gdGhlIGNhY2hlTm9kZXMgYWdhaW4uXG4gICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGVzLmdldChwYXRoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBXaGVuIGNoaWxkTm9kZSBpcyBub3QgYXZhaWxhYmxlIGR1cmluZyByZW5kZXJpbmcgY2xpZW50LXNpZGUgd2UgbmVlZCB0byBmZXRjaCBpdCBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgaWYgKCFjaGlsZE5vZGUpIHtcbiAgICAgICAgLyoqXG4gICAgICogUm91dGVyIHN0YXRlIHdpdGggcmVmZXRjaCBtYXJrZXIgYWRkZWRcbiAgICAgKi8gLy8gVE9ETy1BUFA6IHJlbW92ZSAnJ1xuICAgICAgICBjb25zdCByZWZldGNoVHJlZSA9IHdhbGtBZGRSZWZldGNoKFtcbiAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgLi4uc2VnbWVudFBhdGhcbiAgICAgICAgXSwgZnVsbFRyZWUpO1xuICAgICAgICAvKipcbiAgICAgKiBGbGlnaHQgZGF0YSBmZXRjaCBraWNrZWQgb2ZmIGR1cmluZyByZW5kZXIgYW5kIHB1dCBpbnRvIHRoZSBjYWNoZS5cbiAgICAgKi8gY2hpbGROb2Rlcy5zZXQocGF0aCwge1xuICAgICAgICAgICAgc3RhdHVzOiBfYXBwUm91dGVyQ29udGV4dC5DYWNoZVN0YXRlcy5EQVRBRkVUQ0gsXG4gICAgICAgICAgICBkYXRhOiAoMCwgX2FwcFJvdXRlcikuZmV0Y2hTZXJ2ZXJSZXNwb25zZShuZXcgVVJMKHVybCwgbG9jYXRpb24ub3JpZ2luKSwgcmVmZXRjaFRyZWUpLFxuICAgICAgICAgICAgc3ViVHJlZURhdGE6IG51bGwsXG4gICAgICAgICAgICBwYXJhbGxlbFJvdXRlczogbmV3IE1hcCgpXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBJbiB0aGUgYWJvdmUgY2FzZSBjaGlsZE5vZGUgd2FzIHNldCBvbiBjaGlsZE5vZGVzLCBzbyB3ZSBoYXZlIHRvIGdldCBpdCBmcm9tIHRoZSBjYWNoZU5vZGVzIGFnYWluLlxuICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGVzLmdldChwYXRoKTtcbiAgICB9XG4gICAgLy8gVGhpcyBjYXNlIHNob3VsZCBuZXZlciBoYXBwZW4gc28gaXQgdGhyb3dzIGFuIGVycm9yLiBJdCBpbmRpY2F0ZXMgdGhlcmUncyBhIGJ1ZyBpbiB0aGUgTmV4dC5qcy5cbiAgICBpZiAoIWNoaWxkTm9kZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoaWxkIG5vZGUgc2hvdWxkIGFsd2F5cyBleGlzdCcpO1xuICAgIH1cbiAgICAvLyBUaGlzIGNhc2Ugc2hvdWxkIG5ldmVyIGhhcHBlbiBzbyBpdCB0aHJvd3MgYW4gZXJyb3IuIEl0IGluZGljYXRlcyB0aGVyZSdzIGEgYnVnIGluIHRoZSBOZXh0LmpzLlxuICAgIGlmIChjaGlsZE5vZGUuc3ViVHJlZURhdGEgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDaGlsZCBub2RlIHNob3VsZCBub3QgaGF2ZSBib3RoIHN1YlRyZWVEYXRhIGFuZCBkYXRhJyk7XG4gICAgfVxuICAgIC8vIElmIGNhY2hlIG5vZGUgaGFzIGEgZGF0YSByZXF1ZXN0IHdlIGhhdmUgdG8gdW53cmFwIHJlc3BvbnNlIGJ5IGB1c2VgIGFuZCB1cGRhdGUgdGhlIGNhY2hlLlxuICAgIGlmIChjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgICAvLyBUT0RPLUFQUDogZXJyb3IgY2FzZVxuICAgICAgICAvKipcbiAgICAgKiBGbGlnaHQgcmVzcG9uc2UgZGF0YVxuICAgICAqLyAvLyBXaGVuIHRoZSBkYXRhIGhhcyBub3QgcmVzb2x2ZWQgeWV0IGB1c2VgIHdpbGwgc3VzcGVuZCBoZXJlLlxuICAgICAgICBjb25zdCBbZmxpZ2h0RGF0YSwgb3ZlcnJpZGVDYW5vbmljYWxVcmxdID0gKDAsIF9yZWFjdCkudXNlKGNoaWxkTm9kZS5kYXRhKTtcbiAgICAgICAgLy8gSGFuZGxlIGNhc2Ugd2hlbiBuYXZpZ2F0aW5nIHRvIHBhZ2UgaW4gYHBhZ2VzYCBmcm9tIGBhcHBgXG4gICAgICAgIGlmICh0eXBlb2YgZmxpZ2h0RGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2VnbWVudFBhdGggZnJvbSB0aGUgc2VydmVyIGRvZXMgbm90IG1hdGNoIHRoZSBsYXlvdXQncyBzZWdtZW50UGF0aFxuICAgICAgICBjaGlsZE5vZGUuZGF0YSA9IG51bGw7XG4gICAgICAgIC8vIHNldFRpbWVvdXQgaXMgdXNlZCB0byBzdGFydCBhIG5ldyB0cmFuc2l0aW9uIGR1cmluZyByZW5kZXIsIHRoaXMgaXMgYW4gaW50ZW50aW9uYWwgaGFjayBhcm91bmQgUmVhY3QuXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgc3RhcnRUcmFuc2l0aW9uIGV4aXN0c1xuICAgICAgICAgICAgX3JlYWN0LmRlZmF1bHQuc3RhcnRUcmFuc2l0aW9uKCgpPT57XG4gICAgICAgICAgICAgICAgLy8gVE9ETy1BUFA6IGhhbmRsZSByZWRpcmVjdFxuICAgICAgICAgICAgICAgIGNoYW5nZUJ5U2VydmVyUmVzcG9uc2UoZnVsbFRyZWUsIGZsaWdodERhdGEsIG92ZXJyaWRlQ2Fub25pY2FsVXJsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gU3VzcGVuZCBpbmZpbml0ZWx5IGFzIGBjaGFuZ2VCeVNlcnZlclJlc3BvbnNlYCB3aWxsIGNhdXNlIGEgZGlmZmVyZW50IHBhcnQgb2YgdGhlIHRyZWUgdG8gYmUgcmVuZGVyZWQuXG4gICAgICAgICgwLCBfcmVhY3QpLnVzZSgoMCwgX2luZmluaXRlUHJvbWlzZSkuY3JlYXRlSW5maW5pdGVQcm9taXNlKCkpO1xuICAgIH1cbiAgICAvLyBJZiBjYWNoZSBub2RlIGhhcyBubyBzdWJUcmVlRGF0YSBhbmQgbm8gZGF0YSByZXF1ZXN0IHdlIGhhdmUgdG8gaW5maW5pdGVseSBzdXNwZW5kIGFzIHRoZSBkYXRhIHdpbGwgbGlrZWx5IGZsb3cgaW4gZnJvbSBhbm90aGVyIHBsYWNlLlxuICAgIC8vIFRPRE8tQVBQOiBkb3VibGUgY2hlY2sgdXNlcnMgY2FuJ3QgcmV0dXJuIG51bGwgaW4gYSBjb21wb25lbnQgdGhhdCB3aWxsIGtpY2sgaW4gaGVyZS5cbiAgICBpZiAoIWNoaWxkTm9kZS5zdWJUcmVlRGF0YSkge1xuICAgICAgICAoMCwgX3JlYWN0KS51c2UoKDAsIF9pbmZpbml0ZVByb21pc2UpLmNyZWF0ZUluZmluaXRlUHJvbWlzZSgpKTtcbiAgICB9XG4gICAgY29uc3Qgc3VidHJlZSA9IC8vIFRoZSBsYXlvdXQgcm91dGVyIGNvbnRleHQgbmFycm93cyBkb3duIHRyZWUgYW5kIGNoaWxkTm9kZXMgYXQgZWFjaCBsZXZlbC5cbiAgICAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2FwcFJvdXRlckNvbnRleHQuTGF5b3V0Um91dGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdHJlZTogdHJlZVsxXVtwYXJhbGxlbFJvdXRlcktleV0sXG4gICAgICAgICAgICBjaGlsZE5vZGVzOiBjaGlsZE5vZGUucGFyYWxsZWxSb3V0ZXMsXG4gICAgICAgICAgICAvLyBUT0RPLUFQUDogb3ZlcnJpZGluZyBvZiB1cmwgZm9yIHBhcmFsbGVsIHJvdXRlc1xuICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgfVxuICAgIH0sIGNoaWxkTm9kZS5zdWJUcmVlRGF0YSk7XG4gICAgLy8gRW5zdXJlIHJvb3QgbGF5b3V0IGlzIG5vdCB3cmFwcGVkIGluIGEgZGl2IGFzIHRoZSByb290IGxheW91dCByZW5kZXJzIGA8aHRtbD5gXG4gICAgcmV0dXJuIHJvb3RMYXlvdXRJbmNsdWRlZCA/IC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHJlZjogZm9jdXNBbmRTY3JvbGxFbGVtZW50UmVmLFxuICAgICAgICBcImRhdGEtbmV4dGpzLXNjcm9sbC1mb2N1cy1ib3VuZGFyeVwiOiAnJ1xuICAgIH0sIHN1YnRyZWUpIDogc3VidHJlZTtcbn1cbi8qKlxuICogUmVuZGVycyBzdXNwZW5zZSBib3VuZGFyeSB3aXRoIHRoZSBwcm92aWRlZCBcImxvYWRpbmdcIiBwcm9wZXJ0eSBhcyB0aGUgZmFsbGJhY2suXG4gKiBJZiBubyBsb2FkaW5nIHByb3BlcnR5IGlzIHByb3ZpZGVkIGl0IHJlbmRlcnMgdGhlIGNoaWxkcmVuIHdpdGhvdXQgYSBzdXNwZW5zZSBib3VuZGFyeS5cbiAqLyBmdW5jdGlvbiBMb2FkaW5nQm91bmRhcnkoeyBjaGlsZHJlbiAsIGxvYWRpbmcgLCBsb2FkaW5nU3R5bGVzICwgaGFzTG9hZGluZyAgfSkge1xuICAgIGlmIChoYXNMb2FkaW5nKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuU3VzcGVuc2UsIHtcbiAgICAgICAgICAgIGZhbGxiYWNrOiAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIGxvYWRpbmdTdHlsZXMsIGxvYWRpbmcpXG4gICAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gSGFuZGxlUmVkaXJlY3QoeyByZWRpcmVjdCAgfSkge1xuICAgIGNvbnN0IHJvdXRlciA9ICgwLCBfbmF2aWdhdGlvbikudXNlUm91dGVyKCk7XG4gICAgKDAsIF9yZWFjdCkudXNlRWZmZWN0KCgpPT57XG4gICAgICAgIHJvdXRlci5yZXBsYWNlKHJlZGlyZWN0LCB7fSk7XG4gICAgfSwgW1xuICAgICAgICByZWRpcmVjdCxcbiAgICAgICAgcm91dGVyXG4gICAgXSk7XG4gICAgcmV0dXJuIG51bGw7XG59XG5jbGFzcyBSZWRpcmVjdEVycm9yQm91bmRhcnkgZXh0ZW5kcyBfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQge1xuICAgIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgaWYgKChyZWYgPSBlcnJvci5kaWdlc3QpID09IG51bGwgPyB2b2lkIDAgOiByZWYuc3RhcnRzV2l0aCgnTkVYVF9SRURJUkVDVCcpKSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBlcnJvci5kaWdlc3Quc3BsaXQoJzsnKVsxXTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3Q6IHVybFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZS10aHJvdyBpZiBlcnJvciBpcyBub3QgZm9yIHJlZGlyZWN0XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHJlZGlyZWN0ID0gdGhpcy5zdGF0ZS5yZWRpcmVjdDtcbiAgICAgICAgaWYgKHJlZGlyZWN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEhhbmRsZVJlZGlyZWN0LCB7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3Q6IHJlZGlyZWN0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICByZWRpcmVjdDogbnVsbFxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIFJlZGlyZWN0Qm91bmRhcnkoeyBjaGlsZHJlbiAgfSkge1xuICAgIGNvbnN0IHJvdXRlciA9ICgwLCBfbmF2aWdhdGlvbikudXNlUm91dGVyKCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChSZWRpcmVjdEVycm9yQm91bmRhcnksIHtcbiAgICAgICAgcm91dGVyOiByb3V0ZXJcbiAgICB9LCBjaGlsZHJlbik7XG59XG5jbGFzcyBOb3RGb3VuZEVycm9yQm91bmRhcnkgZXh0ZW5kcyBfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQge1xuICAgIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yLmRpZ2VzdCA9PT0gJ05FWFRfTk9UX0ZPVU5EJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBub3RGb3VuZFRyaWdnZXJlZDogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZS10aHJvdyBpZiBlcnJvciBpcyBub3QgZm9yIDQwNFxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5ub3RGb3VuZFRyaWdnZXJlZCkge1xuICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibWV0YVwiLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJyb2JvdHNcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIm5vaW5kZXhcIlxuICAgICAgICAgICAgfSksIHRoaXMucHJvcHMubm90Rm91bmRTdHlsZXMsIHRoaXMucHJvcHMubm90Rm91bmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG5vdEZvdW5kVHJpZ2dlcmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIE5vdEZvdW5kQm91bmRhcnkoeyBub3RGb3VuZCAsIG5vdEZvdW5kU3R5bGVzICwgY2hpbGRyZW4gIH0pIHtcbiAgICByZXR1cm4gbm90Rm91bmQgPyAvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTm90Rm91bmRFcnJvckJvdW5kYXJ5LCB7XG4gICAgICAgIG5vdEZvdW5kOiBub3RGb3VuZCxcbiAgICAgICAgbm90Rm91bmRTdHlsZXM6IG5vdEZvdW5kU3R5bGVzXG4gICAgfSwgY2hpbGRyZW4pIDogLyojX19QVVJFX18qLyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbik7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxheW91dC1yb3V0ZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIk91dGVyTGF5b3V0Um91dGVyIiwiSW5uZXJMYXlvdXRSb3V0ZXIiLCJfZXh0ZW5kcyIsInJlcXVpcmUiLCJfaW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkIiwiX3JlYWN0IiwiX2FwcFJvdXRlckNvbnRleHQiLCJfYXBwUm91dGVyIiwiX2luZmluaXRlUHJvbWlzZSIsIl9lcnJvckJvdW5kYXJ5IiwiX21hdGNoU2VnbWVudHMiLCJfbmF2aWdhdGlvbiIsInBhcmFsbGVsUm91dGVyS2V5Iiwic2VnbWVudFBhdGgiLCJjaGlsZFByb3AiLCJlcnJvciIsImVycm9yU3R5bGVzIiwidGVtcGxhdGVTdHlsZXMiLCJsb2FkaW5nIiwibG9hZGluZ1N0eWxlcyIsImhhc0xvYWRpbmciLCJ0ZW1wbGF0ZSIsIm5vdEZvdW5kIiwibm90Rm91bmRTdHlsZXMiLCJyb290TGF5b3V0SW5jbHVkZWQiLCJjb250ZXh0IiwidXNlQ29udGV4dCIsIkxheW91dFJvdXRlckNvbnRleHQiLCJFcnJvciIsImNoaWxkTm9kZXMiLCJ0cmVlIiwidXJsIiwiY2hpbGROb2Rlc0ZvclBhcmFsbGVsUm91dGVyIiwiZ2V0Iiwic2V0IiwiTWFwIiwidHJlZVNlZ21lbnQiLCJjaGlsZFByb3BTZWdtZW50IiwiQXJyYXkiLCJpc0FycmF5Iiwic2VnbWVudCIsImN1cnJlbnRDaGlsZFNlZ21lbnQiLCJwcmVzZXJ2ZWRTZWdtZW50cyIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsIm1hcCIsInByZXNlcnZlZFNlZ21lbnQiLCJUZW1wbGF0ZUNvbnRleHQiLCJQcm92aWRlciIsImtleSIsIkVycm9yQm91bmRhcnkiLCJlcnJvckNvbXBvbmVudCIsIkxvYWRpbmdCb3VuZGFyeSIsIk5vdEZvdW5kQm91bmRhcnkiLCJSZWRpcmVjdEJvdW5kYXJ5IiwicGF0aCIsImlzQWN0aXZlIiwid2Fsa0FkZFJlZmV0Y2giLCJzZWdtZW50UGF0aFRvV2FsayIsInRyZWVUb1JlY3JlYXRlIiwicGFyYWxsZWxSb3V0ZUtleSIsImlzTGFzdCIsImxlbmd0aCIsIm1hdGNoU2VnbWVudCIsImhhc093blByb3BlcnR5Iiwic3ViVHJlZSIsInVuZGVmaW5lZCIsInNsaWNlIiwidG9wT2ZFbGVtZW50SW5WaWV3cG9ydCIsImVsZW1lbnQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwiR2xvYmFsTGF5b3V0Um91dGVyQ29udGV4dCIsImNoYW5nZUJ5U2VydmVyUmVzcG9uc2UiLCJmdWxsVHJlZSIsImZvY3VzQW5kU2Nyb2xsUmVmIiwiZm9jdXNBbmRTY3JvbGxFbGVtZW50UmVmIiwidXNlUmVmIiwidXNlRWZmZWN0IiwiYXBwbHkiLCJjdXJyZW50IiwiZm9jdXMiLCJodG1sRWxlbWVudCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiZXhpc3RpbmciLCJzdHlsZSIsInNjcm9sbEJlaGF2aW9yIiwic2Nyb2xsSW50b1ZpZXciLCJjaGlsZE5vZGUiLCJzdGF0dXMiLCJDYWNoZVN0YXRlcyIsIkxBWllJTklUSUFMSVpFRCIsIlJFQURZIiwic3ViVHJlZURhdGEiLCJkYXRhIiwicGFyYWxsZWxSb3V0ZXMiLCJyZWZldGNoVHJlZSIsIkRBVEFGRVRDSCIsImZldGNoU2VydmVyUmVzcG9uc2UiLCJVUkwiLCJsb2NhdGlvbiIsIm9yaWdpbiIsImZsaWdodERhdGEiLCJvdmVycmlkZUNhbm9uaWNhbFVybCIsInVzZSIsIndpbmRvdyIsImhyZWYiLCJzZXRUaW1lb3V0Iiwic3RhcnRUcmFuc2l0aW9uIiwiY3JlYXRlSW5maW5pdGVQcm9taXNlIiwic3VidHJlZSIsInJlZiIsImNoaWxkcmVuIiwiU3VzcGVuc2UiLCJmYWxsYmFjayIsIkhhbmRsZVJlZGlyZWN0IiwicmVkaXJlY3QiLCJyb3V0ZXIiLCJ1c2VSb3V0ZXIiLCJyZXBsYWNlIiwiUmVkaXJlY3RFcnJvckJvdW5kYXJ5IiwiQ29tcG9uZW50IiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZGlnZXN0Iiwic3RhcnRzV2l0aCIsInNwbGl0IiwicmVuZGVyIiwic3RhdGUiLCJwcm9wcyIsImNvbnN0cnVjdG9yIiwiTm90Rm91bmRFcnJvckJvdW5kYXJ5Iiwibm90Rm91bmRUcmlnZ2VyZWQiLCJuYW1lIiwiY29udGVudCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/layout-router.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/match-segments.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/client/components/match-segments.js ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.matchSegment = void 0;\nconst matchSegment = (existingSegment, segment)=>{\n    // Common case: segment is just a string\n    if (typeof existingSegment === \"string\" && typeof segment === \"string\") {\n        return existingSegment === segment;\n    }\n    // Dynamic parameter case: segment is an array with param/value. Both param and value are compared.\n    if (Array.isArray(existingSegment) && Array.isArray(segment)) {\n        return existingSegment[0] === segment[0] && existingSegment[1] === segment[1];\n    }\n    return false;\n};\nexports.matchSegment = matchSegment;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=match-segments.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL21hdGNoLXNlZ21lbnRzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTyxJQUFJO0FBQ2YsQ0FBQyxFQUFDO0FBQ0ZELG9CQUFvQixHQUFHLEtBQUs7QUFDNUIsTUFBTUUsZUFBZSxDQUFDQyxpQkFBaUJDLFVBQVU7SUFDN0Msd0NBQXdDO0lBQ3hDLElBQUksT0FBT0Qsb0JBQW9CLFlBQVksT0FBT0MsWUFBWSxVQUFVO1FBQ3BFLE9BQU9ELG9CQUFvQkM7SUFDL0IsQ0FBQztJQUNELG1HQUFtRztJQUNuRyxJQUFJQyxNQUFNQyxPQUFPLENBQUNILG9CQUFvQkUsTUFBTUMsT0FBTyxDQUFDRixVQUFVO1FBQzFELE9BQU9ELGVBQWUsQ0FBQyxFQUFFLEtBQUtDLE9BQU8sQ0FBQyxFQUFFLElBQUlELGVBQWUsQ0FBQyxFQUFFLEtBQUtDLE9BQU8sQ0FBQyxFQUFFO0lBQ2pGLENBQUM7SUFDRCxPQUFPLEtBQUs7QUFDaEI7QUFDQUosb0JBQW9CLEdBQUdFO0FBRXZCLElBQUksQ0FBQyxPQUFPRixRQUFRTyxPQUFPLEtBQUssY0FBZSxPQUFPUCxRQUFRTyxPQUFPLEtBQUssWUFBWVAsUUFBUU8sT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPUCxRQUFRTyxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLVixPQUFPQyxjQUFjLENBQUNDLFFBQVFPLE9BQU8sRUFBRSxjQUFjO1FBQUVOLE9BQU8sSUFBSTtJQUFDO0lBQ25FSCxPQUFPVyxNQUFNLENBQUNULFFBQVFPLE9BQU8sRUFBRVA7SUFDL0JVLE9BQU9WLE9BQU8sR0FBR0EsUUFBUU8sT0FBTztBQUNsQyxDQUFDLENBRUQsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvbWF0Y2gtc2VnbWVudHMuanM/YmNiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubWF0Y2hTZWdtZW50ID0gdm9pZCAwO1xuY29uc3QgbWF0Y2hTZWdtZW50ID0gKGV4aXN0aW5nU2VnbWVudCwgc2VnbWVudCk9PntcbiAgICAvLyBDb21tb24gY2FzZTogc2VnbWVudCBpcyBqdXN0IGEgc3RyaW5nXG4gICAgaWYgKHR5cGVvZiBleGlzdGluZ1NlZ21lbnQgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBzZWdtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZXhpc3RpbmdTZWdtZW50ID09PSBzZWdtZW50O1xuICAgIH1cbiAgICAvLyBEeW5hbWljIHBhcmFtZXRlciBjYXNlOiBzZWdtZW50IGlzIGFuIGFycmF5IHdpdGggcGFyYW0vdmFsdWUuIEJvdGggcGFyYW0gYW5kIHZhbHVlIGFyZSBjb21wYXJlZC5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShleGlzdGluZ1NlZ21lbnQpICYmIEFycmF5LmlzQXJyYXkoc2VnbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nU2VnbWVudFswXSA9PT0gc2VnbWVudFswXSAmJiBleGlzdGluZ1NlZ21lbnRbMV0gPT09IHNlZ21lbnRbMV07XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5leHBvcnRzLm1hdGNoU2VnbWVudCA9IG1hdGNoU2VnbWVudDtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0Y2gtc2VnbWVudHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWF0Y2hTZWdtZW50IiwiZXhpc3RpbmdTZWdtZW50Iiwic2VnbWVudCIsIkFycmF5IiwiaXNBcnJheSIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/match-segments.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/reducer.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/client/components/reducer.js ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createHrefFromUrl = createHrefFromUrl;\nexports.reducer = exports.ACTION_PREFETCH = exports.ACTION_SERVER_PATCH = exports.ACTION_RESTORE = exports.ACTION_NAVIGATE = exports.ACTION_REFRESH = void 0;\nvar _extends = (__webpack_require__(/*! @swc/helpers/lib/_extends.js */ \"./node_modules/@swc/helpers/lib/_extends.js\")[\"default\"]);\nvar _appRouterContext = __webpack_require__(/*! ../../shared/lib/app-router-context */ \"./node_modules/next/dist/shared/lib/app-router-context.js\");\nvar _matchSegments = __webpack_require__(/*! ./match-segments */ \"./node_modules/next/dist/client/components/match-segments.js\");\nvar _appRouter = __webpack_require__(/*! ./app-router */ \"./node_modules/next/dist/client/components/app-router.js\");\n/**\n * Create data fetching record for Promise.\n */ // TODO-APP: change `any` to type inference.\nfunction createRecordFromThenable(thenable) {\n    thenable.status = \"pending\";\n    thenable.then((value)=>{\n        if (thenable.status === \"pending\") {\n            thenable.status = \"fulfilled\";\n            thenable.value = value;\n        }\n    }, (err)=>{\n        if (thenable.status === \"pending\") {\n            thenable.status = \"rejected\";\n            thenable.value = err;\n        }\n    });\n    return thenable;\n}\n/**\n * Read record value or throw Promise if it's not resolved yet.\n */ function readRecordValue(thenable) {\n    if (thenable.status === \"fulfilled\") {\n        return thenable.value;\n    } else {\n        throw thenable;\n    }\n}\nfunction createHrefFromUrl(url) {\n    return url.pathname + url.search + url.hash;\n}\n/**\n * Invalidate cache one level down from the router state.\n */ // TODO-APP: Verify if this needs to be recursive.\nfunction invalidateCacheByRouterState(newCache, existingCache, routerState) {\n    // Remove segment that we got data for so that it is filled in during rendering of subTreeData.\n    for(const key in routerState[1]){\n        const segmentForParallelRoute = routerState[1][key][0];\n        const cacheKey = Array.isArray(segmentForParallelRoute) ? segmentForParallelRoute[1] : segmentForParallelRoute;\n        const existingParallelRoutesCacheNode = existingCache.parallelRoutes.get(key);\n        if (existingParallelRoutesCacheNode) {\n            let parallelRouteCacheNode = new Map(existingParallelRoutesCacheNode);\n            parallelRouteCacheNode.delete(cacheKey);\n            newCache.parallelRoutes.set(key, parallelRouteCacheNode);\n        }\n    }\n}\nfunction fillLazyItemsTillLeafWithHead(newCache, existingCache, routerState, head) {\n    const isLastSegment = Object.keys(routerState[1]).length === 0;\n    if (isLastSegment) {\n        newCache.head = head;\n        return;\n    }\n    // Remove segment that we got data for so that it is filled in during rendering of subTreeData.\n    for(const key in routerState[1]){\n        const parallelRouteState = routerState[1][key];\n        const segmentForParallelRoute = parallelRouteState[0];\n        const cacheKey = Array.isArray(segmentForParallelRoute) ? segmentForParallelRoute[1] : segmentForParallelRoute;\n        if (existingCache) {\n            const existingParallelRoutesCacheNode = existingCache.parallelRoutes.get(key);\n            if (existingParallelRoutesCacheNode) {\n                let parallelRouteCacheNode = new Map(existingParallelRoutesCacheNode);\n                parallelRouteCacheNode.delete(cacheKey);\n                const newCacheNode = {\n                    status: _appRouterContext.CacheStates.LAZYINITIALIZED,\n                    data: null,\n                    subTreeData: null,\n                    parallelRoutes: new Map()\n                };\n                parallelRouteCacheNode.set(cacheKey, newCacheNode);\n                fillLazyItemsTillLeafWithHead(newCacheNode, undefined, parallelRouteState, head);\n                newCache.parallelRoutes.set(key, parallelRouteCacheNode);\n                continue;\n            }\n        }\n        const newCacheNode1 = {\n            status: _appRouterContext.CacheStates.LAZYINITIALIZED,\n            data: null,\n            subTreeData: null,\n            parallelRoutes: new Map()\n        };\n        newCache.parallelRoutes.set(key, new Map([\n            [\n                cacheKey,\n                newCacheNode1\n            ]\n        ]));\n        fillLazyItemsTillLeafWithHead(newCacheNode1, undefined, parallelRouteState, head);\n    }\n}\n/**\n * Fill cache with subTreeData based on flightDataPath\n */ function fillCacheWithNewSubTreeData(newCache, existingCache, flightDataPath) {\n    const isLastEntry = flightDataPath.length <= 4;\n    const [parallelRouteKey, segment] = flightDataPath;\n    const segmentForCache = Array.isArray(segment) ? segment[1] : segment;\n    const existingChildSegmentMap = existingCache.parallelRoutes.get(parallelRouteKey);\n    if (!existingChildSegmentMap) {\n        // Bailout because the existing cache does not have the path to the leaf node\n        // Will trigger lazy fetch in layout-router because of missing segment\n        return;\n    }\n    let childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey);\n    if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n        childSegmentMap = new Map(existingChildSegmentMap);\n        newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap);\n    }\n    const existingChildCacheNode = existingChildSegmentMap.get(segmentForCache);\n    let childCacheNode = childSegmentMap.get(segmentForCache);\n    // In case of last segment start the fetch at this level and don't copy further down.\n    if (isLastEntry) {\n        if (!childCacheNode || !childCacheNode.data || childCacheNode === existingChildCacheNode) {\n            childCacheNode = {\n                status: _appRouterContext.CacheStates.READY,\n                data: null,\n                subTreeData: flightDataPath[3],\n                // Ensure segments other than the one we got data for are preserved.\n                parallelRoutes: existingChildCacheNode ? new Map(existingChildCacheNode.parallelRoutes) : new Map()\n            };\n            if (existingChildCacheNode) {\n                invalidateCacheByRouterState(childCacheNode, existingChildCacheNode, flightDataPath[2]);\n            }\n            fillLazyItemsTillLeafWithHead(childCacheNode, existingChildCacheNode, flightDataPath[2], /* flightDataPath[4] */ undefined);\n            childSegmentMap.set(segmentForCache, childCacheNode);\n        }\n        return;\n    }\n    if (!childCacheNode || !existingChildCacheNode) {\n        // Bailout because the existing cache does not have the path to the leaf node\n        // Will trigger lazy fetch in layout-router because of missing segment\n        return;\n    }\n    if (childCacheNode === existingChildCacheNode) {\n        childCacheNode = {\n            status: childCacheNode.status,\n            data: childCacheNode.data,\n            subTreeData: childCacheNode.subTreeData,\n            parallelRoutes: new Map(childCacheNode.parallelRoutes)\n        };\n        childSegmentMap.set(segmentForCache, childCacheNode);\n    }\n    fillCacheWithNewSubTreeData(childCacheNode, existingChildCacheNode, flightDataPath.slice(2));\n}\n/**\n * Fill cache up to the end of the flightSegmentPath, invalidating anything below it.\n */ function invalidateCacheBelowFlightSegmentPath(newCache, existingCache, flightSegmentPath) {\n    const isLastEntry = flightSegmentPath.length <= 2;\n    const [parallelRouteKey, segment] = flightSegmentPath;\n    const segmentForCache = Array.isArray(segment) ? segment[1] : segment;\n    const existingChildSegmentMap = existingCache.parallelRoutes.get(parallelRouteKey);\n    if (!existingChildSegmentMap) {\n        // Bailout because the existing cache does not have the path to the leaf node\n        // Will trigger lazy fetch in layout-router because of missing segment\n        return;\n    }\n    let childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey);\n    if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n        childSegmentMap = new Map(existingChildSegmentMap);\n        newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap);\n    }\n    // In case of last entry don't copy further down.\n    if (isLastEntry) {\n        childSegmentMap.delete(segmentForCache);\n        return;\n    }\n    const existingChildCacheNode = existingChildSegmentMap.get(segmentForCache);\n    let childCacheNode = childSegmentMap.get(segmentForCache);\n    if (!childCacheNode || !existingChildCacheNode) {\n        // Bailout because the existing cache does not have the path to the leaf node\n        // Will trigger lazy fetch in layout-router because of missing segment\n        return;\n    }\n    if (childCacheNode === existingChildCacheNode) {\n        childCacheNode = {\n            status: childCacheNode.status,\n            data: childCacheNode.data,\n            subTreeData: childCacheNode.subTreeData,\n            parallelRoutes: new Map(childCacheNode.parallelRoutes)\n        };\n        childSegmentMap.set(segmentForCache, childCacheNode);\n    }\n    invalidateCacheBelowFlightSegmentPath(childCacheNode, existingChildCacheNode, flightSegmentPath.slice(2));\n}\n/**\n * Fill cache with subTreeData based on flightDataPath that was prefetched\n * This operation is append-only to the existing cache.\n */ function fillCacheWithPrefetchedSubTreeData(existingCache, flightDataPath) {\n    const isLastEntry = flightDataPath.length <= 4;\n    const [parallelRouteKey, segment] = flightDataPath;\n    const segmentForCache = Array.isArray(segment) ? segment[1] : segment;\n    const existingChildSegmentMap = existingCache.parallelRoutes.get(parallelRouteKey);\n    if (!existingChildSegmentMap) {\n        // Bailout because the existing cache does not have the path to the leaf node\n        return;\n    }\n    const existingChildCacheNode = existingChildSegmentMap.get(segmentForCache);\n    if (isLastEntry) {\n        if (!existingChildCacheNode) {\n            existingChildSegmentMap.set(segmentForCache, {\n                status: _appRouterContext.CacheStates.READY,\n                data: null,\n                subTreeData: flightDataPath[3],\n                parallelRoutes: new Map()\n            });\n        }\n        return;\n    }\n    if (!existingChildCacheNode) {\n        // Bailout because the existing cache does not have the path to the leaf node\n        return;\n    }\n    fillCacheWithPrefetchedSubTreeData(existingChildCacheNode, flightDataPath.slice(2));\n}\n/**\n * Kick off fetch based on the common layout between two routes. Fill cache with data property holding the in-progress fetch.\n */ function fillCacheWithDataProperty(newCache, existingCache, segments, fetchResponse) {\n    const isLastEntry = segments.length === 1;\n    const parallelRouteKey = \"children\";\n    const [segment] = segments;\n    const existingChildSegmentMap = existingCache.parallelRoutes.get(parallelRouteKey);\n    if (!existingChildSegmentMap) {\n        // Bailout because the existing cache does not have the path to the leaf node\n        // Will trigger lazy fetch in layout-router because of missing segment\n        return {\n            bailOptimistic: true\n        };\n    }\n    let childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey);\n    if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n        childSegmentMap = new Map(existingChildSegmentMap);\n        newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap);\n    }\n    const existingChildCacheNode = existingChildSegmentMap.get(segment);\n    let childCacheNode = childSegmentMap.get(segment);\n    // In case of last segment start off the fetch at this level and don't copy further down.\n    if (isLastEntry) {\n        if (!childCacheNode || !childCacheNode.data || childCacheNode === existingChildCacheNode) {\n            childSegmentMap.set(segment, {\n                status: _appRouterContext.CacheStates.DATAFETCH,\n                data: fetchResponse(),\n                subTreeData: null,\n                parallelRoutes: new Map()\n            });\n        }\n        return;\n    }\n    if (!childCacheNode || !existingChildCacheNode) {\n        // Start fetch in the place where the existing cache doesn't have the data yet.\n        if (!childCacheNode) {\n            childSegmentMap.set(segment, {\n                status: _appRouterContext.CacheStates.DATAFETCH,\n                data: fetchResponse(),\n                subTreeData: null,\n                parallelRoutes: new Map()\n            });\n        }\n        return;\n    }\n    if (childCacheNode === existingChildCacheNode) {\n        childCacheNode = {\n            status: childCacheNode.status,\n            data: childCacheNode.data,\n            subTreeData: childCacheNode.subTreeData,\n            parallelRoutes: new Map(childCacheNode.parallelRoutes)\n        };\n        childSegmentMap.set(segment, childCacheNode);\n    }\n    return fillCacheWithDataProperty(childCacheNode, existingChildCacheNode, segments.slice(1), fetchResponse);\n}\n/**\n * Create optimistic version of router state based on the existing router state and segments.\n * This is used to allow rendering layout-routers up till the point where data is missing.\n */ function createOptimisticTree(segments, flightRouterState, _isFirstSegment, parentRefetch, _href) {\n    const [existingSegment, existingParallelRoutes] = flightRouterState || [\n        null,\n        {}\n    ];\n    const segment = segments[0];\n    const isLastSegment = segments.length === 1;\n    const segmentMatches = existingSegment !== null && (0, _matchSegments).matchSegment(existingSegment, segment);\n    const shouldRefetchThisLevel = !flightRouterState || !segmentMatches;\n    let parallelRoutes = {};\n    if (existingSegment !== null && segmentMatches) {\n        parallelRoutes = existingParallelRoutes;\n    }\n    let childTree;\n    if (!isLastSegment) {\n        const childItem = createOptimisticTree(segments.slice(1), parallelRoutes ? parallelRoutes.children : null, false, parentRefetch || shouldRefetchThisLevel);\n        childTree = childItem;\n    }\n    const result = [\n        segment,\n        _extends({}, parallelRoutes, childTree ? {\n            children: childTree\n        } : {})\n    ];\n    if (!parentRefetch && shouldRefetchThisLevel) {\n        result[3] = \"refetch\";\n    }\n    // TODO-APP: Revisit\n    // Add url into the tree\n    // if (isFirstSegment) {\n    //   result[2] = href\n    // }\n    return result;\n}\n/**\n * Apply the router state from the Flight response. Creates a new router state tree.\n */ function applyRouterStatePatchToTree(flightSegmentPath, flightRouterState, treePatch) {\n    const [segment, parallelRoutes, , , isRootLayout] = flightRouterState;\n    // Root refresh\n    if (flightSegmentPath.length === 1) {\n        const tree = [\n            ...treePatch\n        ];\n        // TODO-APP: revisit\n        // if (url) {\n        //   tree[2] = url\n        // }\n        return tree;\n    }\n    const [currentSegment, parallelRouteKey] = flightSegmentPath;\n    // Tree path returned from the server should always match up with the current tree in the browser\n    if (!(0, _matchSegments).matchSegment(currentSegment, segment)) {\n        return null;\n    }\n    const lastSegment = flightSegmentPath.length === 2;\n    let parallelRoutePatch;\n    if (lastSegment) {\n        parallelRoutePatch = treePatch;\n    } else {\n        parallelRoutePatch = applyRouterStatePatchToTree(flightSegmentPath.slice(2), parallelRoutes[parallelRouteKey], treePatch);\n        if (parallelRoutePatch === null) {\n            return null;\n        }\n    }\n    const tree1 = [\n        flightSegmentPath[0],\n        _extends({}, parallelRoutes, {\n            [parallelRouteKey]: parallelRoutePatch\n        })\n    ];\n    // Current segment is the root layout\n    if (isRootLayout) {\n        tree1[4] = true;\n    }\n    // TODO-APP: Revisit\n    // if (url) {\n    //   tree[2] = url\n    // }\n    return tree1;\n}\nfunction shouldHardNavigate(flightSegmentPath, flightRouterState, treePatch) {\n    const [segment, parallelRoutes] = flightRouterState;\n    // TODO-APP: Check if `as` can be replaced.\n    const [currentSegment, parallelRouteKey] = flightSegmentPath;\n    // Check if current segment matches the existing segment.\n    if (!(0, _matchSegments).matchSegment(currentSegment, segment)) {\n        // If dynamic parameter in tree doesn't match up with segment path a hard navigation is triggered.\n        if (Array.isArray(currentSegment)) {\n            return true;\n        }\n        // If the existing segment did not match soft navigation is triggered.\n        return false;\n    }\n    const lastSegment = flightSegmentPath.length <= 2;\n    if (lastSegment) {\n        return false;\n    }\n    return shouldHardNavigate(flightSegmentPath.slice(2), parallelRoutes[parallelRouteKey], treePatch);\n}\nfunction isNavigatingToNewRootLayout(currentTree, nextTree) {\n    // Compare segments\n    const currentTreeSegment = currentTree[0];\n    const nextTreeSegment = nextTree[0];\n    // If any segment is different before we find the root layout, the root layout has changed.\n    // E.g. /same/(group1)/layout.js -> /same/(group2)/layout.js\n    // First segment is 'same' for both, keep looking. (group1) changed to (group2) before the root layout was found, it must have changed.\n    if (Array.isArray(currentTreeSegment) && Array.isArray(nextTreeSegment)) {\n        // Compare dynamic param name and type but ignore the value, different values would not affect the current root layout\n        // /[name] - /slug1 and /slug2, both values (slug1 & slug2) still has the same layout /[name]/layout.js\n        if (currentTreeSegment[0] !== nextTreeSegment[0] || currentTreeSegment[2] !== nextTreeSegment[2]) {\n            return true;\n        }\n    } else if (currentTreeSegment !== nextTreeSegment) {\n        return true;\n    }\n    // Current tree root layout found\n    if (currentTree[4]) {\n        // If the next tree doesn't have the root layout flag, it must have changed.\n        return !nextTree[4];\n    }\n    // Current tree  didn't have its root layout here, must have changed.\n    if (nextTree[4]) {\n        return true;\n    }\n    // We can't assume it's `parallelRoutes.children` here in case the root layout is `app/@something/layout.js`\n    // But it's not possible to be more than one parallelRoutes before the root layout is found\n    // TODO-APP: change to traverse all parallel routes\n    const currentTreeChild = Object.values(currentTree[1])[0];\n    const nextTreeChild = Object.values(nextTree[1])[0];\n    if (!currentTreeChild || !nextTreeChild) return true;\n    return isNavigatingToNewRootLayout(currentTreeChild, nextTreeChild);\n}\nconst ACTION_REFRESH = \"refresh\";\nexports.ACTION_REFRESH = ACTION_REFRESH;\nconst ACTION_NAVIGATE = \"navigate\";\nexports.ACTION_NAVIGATE = ACTION_NAVIGATE;\nconst ACTION_RESTORE = \"restore\";\nexports.ACTION_RESTORE = ACTION_RESTORE;\nconst ACTION_SERVER_PATCH = \"server-patch\";\nexports.ACTION_SERVER_PATCH = ACTION_SERVER_PATCH;\nconst ACTION_PREFETCH = \"prefetch\";\nexports.ACTION_PREFETCH = ACTION_PREFETCH;\n/**\n * Reducer that handles the app-router state updates.\n */ function clientReducer(state, action) {\n    switch(action.type){\n        case ACTION_NAVIGATE:\n            {\n                const { url , navigateType , cache , mutable , forceOptimisticNavigation  } = action;\n                const { pathname , search  } = url;\n                const href = createHrefFromUrl(url);\n                const pendingPush = navigateType === \"push\";\n                const isForCurrentTree = JSON.stringify(mutable.previousTree) === JSON.stringify(state.tree);\n                if (mutable.mpaNavigation && isForCurrentTree) {\n                    return {\n                        // Set href.\n                        canonicalUrl: mutable.canonicalUrlOverride ? mutable.canonicalUrlOverride : href,\n                        // TODO-APP: verify mpaNavigation not being set is correct here.\n                        pushRef: {\n                            pendingPush,\n                            mpaNavigation: mutable.mpaNavigation\n                        },\n                        // All navigation requires scroll and focus management to trigger.\n                        focusAndScrollRef: {\n                            apply: false\n                        },\n                        // Apply cache.\n                        cache: state.cache,\n                        prefetchCache: state.prefetchCache,\n                        // Apply patched router state.\n                        tree: state.tree\n                    };\n                }\n                // Handle concurrent rendering / strict mode case where the cache and tree were already populated.\n                if (mutable.patchedTree && isForCurrentTree) {\n                    return {\n                        // Set href.\n                        canonicalUrl: mutable.canonicalUrlOverride ? mutable.canonicalUrlOverride : href,\n                        // TODO-APP: verify mpaNavigation not being set is correct here.\n                        pushRef: {\n                            pendingPush,\n                            mpaNavigation: false\n                        },\n                        // All navigation requires scroll and focus management to trigger.\n                        focusAndScrollRef: {\n                            apply: true\n                        },\n                        // Apply cache.\n                        cache: mutable.useExistingCache ? state.cache : cache,\n                        prefetchCache: state.prefetchCache,\n                        // Apply patched router state.\n                        tree: mutable.patchedTree\n                    };\n                }\n                const prefetchValues = state.prefetchCache.get(href);\n                if (prefetchValues) {\n                    // The one before last item is the router state tree patch\n                    const { flightSegmentPath , tree: newTree , canonicalUrlOverride  } = prefetchValues;\n                    if (newTree !== null) {\n                        mutable.previousTree = state.tree;\n                        mutable.patchedTree = newTree;\n                        mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, newTree);\n                        const hardNavigate = search !== location.search || shouldHardNavigate([\n                            \"\",\n                            ...flightSegmentPath\n                        ], state.tree, newTree);\n                        if (hardNavigate) {\n                            // TODO-APP: segments.slice(1) strips '', we can get rid of '' altogether.\n                            // Copy subTreeData for the root node of the cache.\n                            cache.subTreeData = state.cache.subTreeData;\n                            invalidateCacheBelowFlightSegmentPath(cache, state.cache, flightSegmentPath);\n                        } else {\n                            mutable.useExistingCache = true;\n                        }\n                        const canonicalUrlOverrideHref = canonicalUrlOverride ? createHrefFromUrl(canonicalUrlOverride) : undefined;\n                        if (canonicalUrlOverrideHref) {\n                            mutable.canonicalUrlOverride = canonicalUrlOverrideHref;\n                        }\n                        return {\n                            // Set href.\n                            canonicalUrl: canonicalUrlOverrideHref ? canonicalUrlOverrideHref : href,\n                            // Set pendingPush.\n                            pushRef: {\n                                pendingPush,\n                                mpaNavigation: false\n                            },\n                            // All navigation requires scroll and focus management to trigger.\n                            focusAndScrollRef: {\n                                apply: true\n                            },\n                            // Apply patched cache.\n                            cache: mutable.useExistingCache ? state.cache : cache,\n                            prefetchCache: state.prefetchCache,\n                            // Apply patched tree.\n                            tree: newTree\n                        };\n                    }\n                }\n                // When doing a hard push there can be two cases: with optimistic tree and without\n                // The with optimistic tree case only happens when the layouts have a loading state (loading.js)\n                // The without optimistic tree case happens when there is no loading state, in that case we suspend in this reducer\n                // forceOptimisticNavigation is used for links that have `prefetch={false}`.\n                if (forceOptimisticNavigation) {\n                    const segments = pathname.split(\"/\");\n                    // TODO-APP: figure out something better for index pages\n                    segments.push(\"\");\n                    // Optimistic tree case.\n                    // If the optimistic tree is deeper than the current state leave that deeper part out of the fetch\n                    const optimisticTree = createOptimisticTree(segments, state.tree, true, false, href);\n                    // Copy subTreeData for the root node of the cache.\n                    cache.subTreeData = state.cache.subTreeData;\n                    // Copy existing cache nodes as far as possible and fill in `data` property with the started data fetch.\n                    // The `data` property is used to suspend in layout-router during render if it hasn't resolved yet by the time it renders.\n                    const res = fillCacheWithDataProperty(cache, state.cache, segments.slice(1), ()=>(0, _appRouter).fetchServerResponse(url, optimisticTree));\n                    // If optimistic fetch couldn't happen it falls back to the non-optimistic case.\n                    if (!(res == null ? void 0 : res.bailOptimistic)) {\n                        mutable.previousTree = state.tree;\n                        mutable.patchedTree = optimisticTree;\n                        mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, optimisticTree);\n                        return {\n                            // Set href.\n                            canonicalUrl: href,\n                            // Set pendingPush.\n                            pushRef: {\n                                pendingPush,\n                                mpaNavigation: false\n                            },\n                            // All navigation requires scroll and focus management to trigger.\n                            focusAndScrollRef: {\n                                apply: true\n                            },\n                            // Apply patched cache.\n                            cache: cache,\n                            prefetchCache: state.prefetchCache,\n                            // Apply optimistic tree.\n                            tree: optimisticTree\n                        };\n                    }\n                }\n                // Below is the not-optimistic case. Data is fetched at the root and suspended there without a suspense boundary.\n                // If no in-flight fetch at the top, start it.\n                if (!cache.data) {\n                    cache.data = createRecordFromThenable((0, _appRouter).fetchServerResponse(url, state.tree));\n                }\n                // Unwrap cache data with `use` to suspend here (in the reducer) until the fetch resolves.\n                const [flightData, canonicalUrlOverride1] = readRecordValue(cache.data);\n                // Handle case when navigating to page in `pages` from `app`\n                if (typeof flightData === \"string\") {\n                    return {\n                        canonicalUrl: flightData,\n                        // Enable mpaNavigation\n                        pushRef: {\n                            pendingPush: true,\n                            mpaNavigation: true\n                        },\n                        // Don't apply scroll and focus management.\n                        focusAndScrollRef: {\n                            apply: false\n                        },\n                        cache: state.cache,\n                        prefetchCache: state.prefetchCache,\n                        tree: state.tree\n                    };\n                }\n                // Remove cache.data as it has been resolved at this point.\n                cache.data = null;\n                // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.\n                const flightDataPath = flightData[0];\n                // The one before last item is the router state tree patch\n                const [treePatch, subTreeData] = flightDataPath.slice(-2);\n                // Path without the last segment, router state, and the subTreeData\n                const flightSegmentPath1 = flightDataPath.slice(0, -3);\n                // Create new tree based on the flightSegmentPath and router state patch\n                const newTree1 = applyRouterStatePatchToTree([\n                    \"\",\n                    ...flightSegmentPath1\n                ], state.tree, treePatch);\n                if (newTree1 === null) {\n                    throw new Error(\"SEGMENT MISMATCH\");\n                }\n                const canonicalUrlOverrideHref1 = canonicalUrlOverride1 ? createHrefFromUrl(canonicalUrlOverride1) : undefined;\n                if (canonicalUrlOverrideHref1) {\n                    mutable.canonicalUrlOverride = canonicalUrlOverrideHref1;\n                }\n                mutable.previousTree = state.tree;\n                mutable.patchedTree = newTree1;\n                mutable.mpaNavigation = isNavigatingToNewRootLayout(state.tree, newTree1);\n                if (flightDataPath.length === 2) {\n                    cache.subTreeData = subTreeData;\n                } else {\n                    // Copy subTreeData for the root node of the cache.\n                    cache.subTreeData = state.cache.subTreeData;\n                    // Create a copy of the existing cache with the subTreeData applied.\n                    fillCacheWithNewSubTreeData(cache, state.cache, flightDataPath);\n                }\n                return {\n                    // Set href.\n                    canonicalUrl: canonicalUrlOverrideHref1 ? canonicalUrlOverrideHref1 : href,\n                    // Set pendingPush.\n                    pushRef: {\n                        pendingPush,\n                        mpaNavigation: false\n                    },\n                    // All navigation requires scroll and focus management to trigger.\n                    focusAndScrollRef: {\n                        apply: true\n                    },\n                    // Apply patched cache.\n                    cache: cache,\n                    prefetchCache: state.prefetchCache,\n                    // Apply patched tree.\n                    tree: newTree1\n                };\n            }\n        case ACTION_SERVER_PATCH:\n            {\n                const { flightData: flightData1 , previousTree , overrideCanonicalUrl , cache: cache1 , mutable: mutable1  } = action;\n                // When a fetch is slow to resolve it could be that you navigated away while the request was happening or before the reducer runs.\n                // In that case opt-out of applying the patch given that the data could be stale.\n                if (JSON.stringify(previousTree) !== JSON.stringify(state.tree)) {\n                    // TODO-APP: Handle tree mismatch\n                    console.log(\"TREE MISMATCH\");\n                    // Keep everything as-is.\n                    return state;\n                }\n                if (mutable1.mpaNavigation) {\n                    return {\n                        // Set href.\n                        canonicalUrl: mutable1.canonicalUrlOverride ? mutable1.canonicalUrlOverride : state.canonicalUrl,\n                        // TODO-APP: verify mpaNavigation not being set is correct here.\n                        pushRef: {\n                            pendingPush: true,\n                            mpaNavigation: mutable1.mpaNavigation\n                        },\n                        // All navigation requires scroll and focus management to trigger.\n                        focusAndScrollRef: {\n                            apply: false\n                        },\n                        // Apply cache.\n                        cache: state.cache,\n                        prefetchCache: state.prefetchCache,\n                        // Apply patched router state.\n                        tree: state.tree\n                    };\n                }\n                // Handle concurrent rendering / strict mode case where the cache and tree were already populated.\n                if (mutable1.patchedTree) {\n                    return {\n                        // Keep href as it was set during navigate / restore\n                        canonicalUrl: mutable1.canonicalUrlOverride ? mutable1.canonicalUrlOverride : state.canonicalUrl,\n                        // Keep pushRef as server-patch only causes cache/tree update.\n                        pushRef: state.pushRef,\n                        // Keep focusAndScrollRef as server-patch only causes cache/tree update.\n                        focusAndScrollRef: state.focusAndScrollRef,\n                        // Apply patched router state\n                        tree: mutable1.patchedTree,\n                        prefetchCache: state.prefetchCache,\n                        // Apply patched cache\n                        cache: cache1\n                    };\n                }\n                // Handle case when navigating to page in `pages` from `app`\n                if (typeof flightData1 === \"string\") {\n                    return {\n                        // Set href.\n                        canonicalUrl: flightData1,\n                        // Enable mpaNavigation as this is a navigation that the app-router shouldn't handle.\n                        pushRef: {\n                            pendingPush: true,\n                            mpaNavigation: true\n                        },\n                        // Don't apply scroll and focus management.\n                        focusAndScrollRef: {\n                            apply: false\n                        },\n                        // Other state is kept as-is.\n                        cache: state.cache,\n                        prefetchCache: state.prefetchCache,\n                        tree: state.tree\n                    };\n                }\n                // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.\n                const flightDataPath1 = flightData1[0];\n                // Slices off the last segment (which is at -3) as it doesn't exist in the tree yet\n                const treePath = flightDataPath1.slice(0, -3);\n                const [treePatch1, subTreeData1] = flightDataPath1.slice(-2);\n                const newTree2 = applyRouterStatePatchToTree([\n                    \"\",\n                    ...treePath\n                ], state.tree, treePatch1);\n                if (newTree2 === null) {\n                    throw new Error(\"SEGMENT MISMATCH\");\n                }\n                const canonicalUrlOverrideHref2 = overrideCanonicalUrl ? createHrefFromUrl(overrideCanonicalUrl) : undefined;\n                if (canonicalUrlOverrideHref2) {\n                    mutable1.canonicalUrlOverride = canonicalUrlOverrideHref2;\n                }\n                mutable1.patchedTree = newTree2;\n                mutable1.mpaNavigation = isNavigatingToNewRootLayout(state.tree, newTree2);\n                // Root refresh\n                if (flightDataPath1.length === 2) {\n                    cache1.subTreeData = subTreeData1;\n                } else {\n                    // Copy subTreeData for the root node of the cache.\n                    cache1.subTreeData = state.cache.subTreeData;\n                    fillCacheWithNewSubTreeData(cache1, state.cache, flightDataPath1);\n                }\n                return {\n                    // Keep href as it was set during navigate / restore\n                    canonicalUrl: canonicalUrlOverrideHref2 ? canonicalUrlOverrideHref2 : state.canonicalUrl,\n                    // Keep pushRef as server-patch only causes cache/tree update.\n                    pushRef: state.pushRef,\n                    // Keep focusAndScrollRef as server-patch only causes cache/tree update.\n                    focusAndScrollRef: state.focusAndScrollRef,\n                    // Apply patched router state\n                    tree: newTree2,\n                    prefetchCache: state.prefetchCache,\n                    // Apply patched cache\n                    cache: cache1\n                };\n            }\n        case ACTION_RESTORE:\n            {\n                const { url: url1 , tree  } = action;\n                const href1 = createHrefFromUrl(url1);\n                return {\n                    // Set canonical url\n                    canonicalUrl: href1,\n                    pushRef: state.pushRef,\n                    focusAndScrollRef: state.focusAndScrollRef,\n                    cache: state.cache,\n                    prefetchCache: state.prefetchCache,\n                    // Restore provided tree\n                    tree: tree\n                };\n            }\n        // TODO-APP: Add test for not scrolling to nearest layout when calling refresh.\n        // TODO-APP: Add test for startTransition(() => {router.push('/'); router.refresh();}), that case should scroll.\n        case ACTION_REFRESH:\n            {\n                const { cache: cache2 , mutable: mutable2  } = action;\n                const href2 = state.canonicalUrl;\n                const isForCurrentTree1 = JSON.stringify(mutable2.previousTree) === JSON.stringify(state.tree);\n                if (mutable2.mpaNavigation && isForCurrentTree1) {\n                    return {\n                        // Set href.\n                        canonicalUrl: mutable2.canonicalUrlOverride ? mutable2.canonicalUrlOverride : state.canonicalUrl,\n                        // TODO-APP: verify mpaNavigation not being set is correct here.\n                        pushRef: {\n                            pendingPush: true,\n                            mpaNavigation: mutable2.mpaNavigation\n                        },\n                        // All navigation requires scroll and focus management to trigger.\n                        focusAndScrollRef: {\n                            apply: false\n                        },\n                        // Apply cache.\n                        cache: state.cache,\n                        prefetchCache: state.prefetchCache,\n                        // Apply patched router state.\n                        tree: state.tree\n                    };\n                }\n                // Handle concurrent rendering / strict mode case where the cache and tree were already populated.\n                if (mutable2.patchedTree && isForCurrentTree1) {\n                    return {\n                        // Set href.\n                        canonicalUrl: mutable2.canonicalUrlOverride ? mutable2.canonicalUrlOverride : href2,\n                        // set pendingPush (always false in this case).\n                        pushRef: state.pushRef,\n                        // Apply focus and scroll.\n                        // TODO-APP: might need to disable this for Fast Refresh.\n                        focusAndScrollRef: {\n                            apply: false\n                        },\n                        cache: cache2,\n                        prefetchCache: state.prefetchCache,\n                        tree: mutable2.patchedTree\n                    };\n                }\n                if (!cache2.data) {\n                    // Fetch data from the root of the tree.\n                    cache2.data = createRecordFromThenable((0, _appRouter).fetchServerResponse(new URL(href2, location.origin), [\n                        state.tree[0],\n                        state.tree[1],\n                        state.tree[2],\n                        \"refetch\"\n                    ]));\n                }\n                const [flightData2, canonicalUrlOverride2] = readRecordValue(cache2.data);\n                // Handle case when navigating to page in `pages` from `app`\n                if (typeof flightData2 === \"string\") {\n                    return {\n                        canonicalUrl: flightData2,\n                        pushRef: {\n                            pendingPush: true,\n                            mpaNavigation: true\n                        },\n                        focusAndScrollRef: {\n                            apply: false\n                        },\n                        cache: state.cache,\n                        prefetchCache: state.prefetchCache,\n                        tree: state.tree\n                    };\n                }\n                // Remove cache.data as it has been resolved at this point.\n                cache2.data = null;\n                // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.\n                const flightDataPath2 = flightData2[0];\n                // FlightDataPath with more than two items means unexpected Flight data was returned\n                if (flightDataPath2.length !== 2) {\n                    // TODO-APP: handle this case better\n                    console.log(\"REFRESH FAILED\");\n                    return state;\n                }\n                // Given the path can only have two items the items are only the router state and subTreeData for the root.\n                const [treePatch2, subTreeData2] = flightDataPath2;\n                const newTree3 = applyRouterStatePatchToTree([\n                    \"\"\n                ], state.tree, treePatch2);\n                if (newTree3 === null) {\n                    throw new Error(\"SEGMENT MISMATCH\");\n                }\n                const canonicalUrlOverrideHref3 = canonicalUrlOverride2 ? createHrefFromUrl(canonicalUrlOverride2) : undefined;\n                if (canonicalUrlOverride2) {\n                    mutable2.canonicalUrlOverride = canonicalUrlOverrideHref3;\n                }\n                mutable2.previousTree = state.tree;\n                mutable2.patchedTree = newTree3;\n                mutable2.mpaNavigation = isNavigatingToNewRootLayout(state.tree, newTree3);\n                // Set subTreeData for the root node of the cache.\n                cache2.subTreeData = subTreeData2;\n                return {\n                    // Set href, this doesn't reuse the state.canonicalUrl as because of concurrent rendering the href might change between dispatching and applying.\n                    canonicalUrl: canonicalUrlOverrideHref3 ? canonicalUrlOverrideHref3 : href2,\n                    // set pendingPush (always false in this case).\n                    pushRef: state.pushRef,\n                    // TODO-APP: might need to disable this for Fast Refresh.\n                    focusAndScrollRef: {\n                        apply: false\n                    },\n                    // Apply patched cache.\n                    cache: cache2,\n                    prefetchCache: state.prefetchCache,\n                    // Apply patched router state.\n                    tree: newTree3\n                };\n            }\n        case ACTION_PREFETCH:\n            {\n                const { url: url2 , serverResponse  } = action;\n                const [flightData3, canonicalUrlOverride3] = serverResponse;\n                // TODO-APP: Implement prefetch for hard navigation\n                if (typeof flightData3 === \"string\") {\n                    return state;\n                }\n                const href3 = createHrefFromUrl(url2);\n                // TODO-APP: Currently the Flight data can only have one item but in the future it can have multiple paths.\n                const flightDataPath3 = flightData3[0];\n                // The one before last item is the router state tree patch\n                const [treePatch3, subTreeData3] = flightDataPath3.slice(-2);\n                // TODO-APP: Verify if `null` can't be returned from user code.\n                // If subTreeData is null the prefetch did not provide a component tree.\n                if (subTreeData3 !== null) {\n                    fillCacheWithPrefetchedSubTreeData(state.cache, flightDataPath3);\n                }\n                const flightSegmentPath2 = flightDataPath3.slice(0, -2);\n                const newTree4 = applyRouterStatePatchToTree([\n                    \"\",\n                    ...flightSegmentPath2\n                ], state.tree, treePatch3);\n                // Patch did not apply correctly\n                if (newTree4 === null) {\n                    return state;\n                }\n                // Create new tree based on the flightSegmentPath and router state patch\n                state.prefetchCache.set(href3, {\n                    // Path without the last segment, router state, and the subTreeData\n                    flightSegmentPath: flightSegmentPath2,\n                    // Create new tree based on the flightSegmentPath and router state patch\n                    tree: newTree4,\n                    canonicalUrlOverride: canonicalUrlOverride3\n                });\n                return state;\n            }\n        // This case should never be hit as dispatch is strongly typed.\n        default:\n            throw new Error(\"Unknown action\");\n    }\n}\nfunction serverReducer(state, _action) {\n    return state;\n}\nconst reducer =  false ? 0 : clientReducer;\nexports.reducer = reducer;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=reducer.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/reducer.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/render-from-template-context.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/render-from-template-context.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _s = $RefreshSig$();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = RenderFromTemplateContext;\nvar _interop_require_wildcard = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_wildcard.js */ \"./node_modules/@swc/helpers/lib/_interop_require_wildcard.js\")[\"default\"]);\nvar _react = _interop_require_wildcard(__webpack_require__(/*! react */ \"./node_modules/next/dist/compiled/react/index.js\"));\nvar _appRouterContext = __webpack_require__(/*! ../../shared/lib/app-router-context */ \"./node_modules/next/dist/shared/lib/app-router-context.js\");\nfunction RenderFromTemplateContext() {\n    _s();\n    const children = (0, _react).useContext(_appRouterContext.TemplateContext);\n    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, children);\n}\n_s(RenderFromTemplateContext, \"Fd1ieM0FAzMq7OA5+LlfYPV5S7Y=\");\n_c = RenderFromTemplateContext;\n\"use client\";\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=render-from-template-context.js.map\nvar _c;\n$RefreshReg$(_c, \"RenderFromTemplateContext\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlbmRlci1mcm9tLXRlbXBsYXRlLWNvbnRleHQuanMuanMiLCJtYXBwaW5ncyI6IkFBQ2E7O0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTyxJQUFJO0FBQ2YsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUdHO0FBQ2xCLElBQUlDLDRCQUE0QkMscUpBQWdFO0FBQ2hHLElBQUlDLFNBQVNGLDBCQUEwQkMsbUJBQU9BLENBQUMsK0RBQU87QUFDdEQsSUFBSUUsb0JBQW9CRixtQkFBT0EsQ0FBQyxzR0FBcUM7QUFDckUsU0FBU0YsNEJBQTRCOztJQUNqQyxNQUFNSyxXQUFXLENBQUMsR0FBR0YsTUFBTSxFQUFFRyxVQUFVLENBQUNGLGtCQUFrQkcsZUFBZTtJQUN6RSxPQUFPLFdBQVcsR0FBR0osT0FBT0osT0FBTyxDQUFDUyxhQUFhLENBQUNMLE9BQU9KLE9BQU8sQ0FBQ1UsUUFBUSxFQUFFLElBQUksRUFBRUo7QUFDckY7R0FIU0w7S0FBQUE7QUFJVDtBQUVBLElBQUksQ0FBQyxPQUFPSCxRQUFRRSxPQUFPLEtBQUssY0FBZSxPQUFPRixRQUFRRSxPQUFPLEtBQUssWUFBWUYsUUFBUUUsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPRixRQUFRRSxPQUFPLENBQUNXLFVBQVUsS0FBSyxhQUFhO0lBQ3JLZixPQUFPQyxjQUFjLENBQUNDLFFBQVFFLE9BQU8sRUFBRSxjQUFjO1FBQUVELE9BQU8sSUFBSTtJQUFDO0lBQ25FSCxPQUFPZ0IsTUFBTSxDQUFDZCxRQUFRRSxPQUFPLEVBQUVGO0lBQy9CZSxPQUFPZixPQUFPLEdBQUdBLFFBQVFFLE9BQU87QUFDbEMsQ0FBQyxDQUVELHdEQUF3RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlbmRlci1mcm9tLXRlbXBsYXRlLWNvbnRleHQuanM/OGVlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gUmVuZGVyRnJvbVRlbXBsYXRlQ29udGV4dDtcbnZhciBfaW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkID0gcmVxdWlyZShcIkBzd2MvaGVscGVycy9saWIvX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZC5qc1wiKS5kZWZhdWx0O1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfYXBwUm91dGVyQ29udGV4dCA9IHJlcXVpcmUoXCIuLi8uLi9zaGFyZWQvbGliL2FwcC1yb3V0ZXItY29udGV4dFwiKTtcbmZ1bmN0aW9uIFJlbmRlckZyb21UZW1wbGF0ZUNvbnRleHQoKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSAoMCwgX3JlYWN0KS51c2VDb250ZXh0KF9hcHBSb3V0ZXJDb250ZXh0LlRlbXBsYXRlQ29udGV4dCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xufVxuJ3VzZSBjbGllbnQnO1xuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW5kZXItZnJvbS10ZW1wbGF0ZS1jb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJSZW5kZXJGcm9tVGVtcGxhdGVDb250ZXh0IiwiX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfYXBwUm91dGVyQ29udGV4dCIsImNoaWxkcmVuIiwidXNlQ29udGV4dCIsIlRlbXBsYXRlQ29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/render-from-template-context.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/components/use-reducer-with-devtools.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/use-reducer-with-devtools.js ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useReducerWithReduxDevtools = void 0;\nvar _react = __webpack_require__(/*! react */ \"./node_modules/next/dist/compiled/react/index.js\");\nfunction normalizeRouterState(val) {\n    if (val instanceof Map) {\n        const obj = {};\n        for (const [key, value] of val.entries()){\n            if (typeof value === \"function\") {\n                obj[key] = \"fn()\";\n                continue;\n            }\n            if (typeof value === \"object\" && value !== null) {\n                if (value.$$typeof) {\n                    obj[key] = value.$$typeof.toString();\n                    continue;\n                }\n                if (value._bundlerConfig) {\n                    obj[key] = \"FlightData\";\n                    continue;\n                }\n            }\n            obj[key] = normalizeRouterState(value);\n        }\n        return obj;\n    }\n    if (typeof val === \"object\" && val !== null) {\n        const obj1 = {};\n        for(const key1 in val){\n            const value1 = val[key1];\n            if (typeof value1 === \"function\") {\n                obj1[key1] = \"fn()\";\n                continue;\n            }\n            if (typeof value1 === \"object\" && value1 !== null) {\n                if (value1.$$typeof) {\n                    obj1[key1] = value1.$$typeof.toString();\n                    continue;\n                }\n                if (value1.hasOwnProperty(\"_bundlerConfig\")) {\n                    obj1[key1] = \"FlightData\";\n                    continue;\n                }\n            }\n            obj1[key1] = normalizeRouterState(value1);\n        }\n        return obj1;\n    }\n    if (Array.isArray(val)) {\n        return val.map(normalizeRouterState);\n    }\n    return val;\n}\nfunction devToolReducer(fn, ref) {\n    return (state, action)=>{\n        const res = fn(state, action);\n        if (ref.current) {\n            ref.current.send(action, normalizeRouterState(res));\n        }\n        return res;\n    };\n}\nfunction useReducerWithReduxDevtoolsNoop(fn, initialState) {\n    _s();\n    const [state, dispatch] = (0, _react).useReducer(fn, initialState);\n    return [\n        state,\n        dispatch,\n        ()=>{}\n    ];\n}\n_s(useReducerWithReduxDevtoolsNoop, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\nfunction useReducerWithReduxDevtoolsImpl(fn, initialState) {\n    _s1();\n    const devtoolsConnectionRef = (0, _react).useRef();\n    const enabledRef = (0, _react).useRef();\n    (0, _react).useEffect(()=>{\n        if (devtoolsConnectionRef.current || enabledRef.current === false) {\n            return;\n        }\n        if (enabledRef.current === undefined && typeof window.__REDUX_DEVTOOLS_EXTENSION__ === \"undefined\") {\n            enabledRef.current = false;\n            return;\n        }\n        devtoolsConnectionRef.current = window.__REDUX_DEVTOOLS_EXTENSION__.connect({\n            instanceId: 1,\n            name: \"next-router\"\n        });\n        if (devtoolsConnectionRef.current) {\n            devtoolsConnectionRef.current.init(normalizeRouterState(initialState));\n        }\n        return ()=>{\n            devtoolsConnectionRef.current = undefined;\n        };\n    }, [\n        initialState\n    ]);\n    const [state, dispatch] = (0, _react).useReducer(devToolReducer(/* logReducer( */ fn /*)*/ , devtoolsConnectionRef), initialState);\n    const sync = (0, _react).useCallback(()=>{\n        if (devtoolsConnectionRef.current) {\n            devtoolsConnectionRef.current.send({\n                type: \"RENDER_SYNC\"\n            }, normalizeRouterState(state));\n        }\n    }, [\n        state\n    ]);\n    return [\n        state,\n        dispatch,\n        sync\n    ];\n}\n_s1(useReducerWithReduxDevtoolsImpl, \"pLR6zS9fUqATAvEc1j249W8BDm8=\");\nconst useReducerWithReduxDevtools =  true ? useReducerWithReduxDevtoolsImpl : 0;\nexports.useReducerWithReduxDevtools = useReducerWithReduxDevtools;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=use-reducer-with-devtools.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/use-reducer-with-devtools.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=next%2Fdist%2Fclient%2Fcomponents%2Fapp-router&modules=next%2Fdist%2Fclient%2Fcomponents%2Flayout-router&modules=next%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);